<div class="image-grid-section">
  <div class="page-width">
    <div class="grid-header">
      <h2 class="grid-title">{{ section.settings.title }}</h2>
    </div>

    <div class="image-grid-container">
      {% comment %} Grid Item 1 {% endcomment %}
      <div class="grid-item">
        {% if section.settings.image_1 != blank %}
          {# Added width and height attributes to prevent CLS #}
          {{ section.settings.image_1 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% else %}
          <div class="placeholder-image">
            {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {% endif %}
        {% if section.settings.overlay_image_1 != blank %}
          {# Added width and height attributes to overlay image #}
          <div class="overlay-button" data-product-handle="{{ section.settings.product_1 }}">
            {{ section.settings.overlay_image_1 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-1', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      {% comment %} Grid Item 2 {% endcomment %}
      <div class="grid-item">
        {% if section.settings.image_2 != blank %}
          {# Added width and height attributes to prevent CLS #}
          {{ section.settings.image_2 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% else %}
          <div class="placeholder-image">
            {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {% endif %}
        {% if section.settings.overlay_image_2 != blank %}
          {# Added width and height attributes to overlay image #}
          <div class="overlay-button" data-product-handle="{{ section.settings.product_2 }}">
            {{ section.settings.overlay_image_2 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-2', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      {% comment %} Grid Item 3 {% endcomment %}
      <div class="grid-item">
        {% if section.settings.image_3 != blank %}
          {# Added width and height attributes to prevent CLS #}
          {{ section.settings.image_3 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% else %}
          <div class="placeholder-image">
            {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {% endif %}
        {% if section.settings.overlay_image_3 != blank %}
          {# Added width and height attributes to overlay image #}
          <div class="overlay-button" data-product-handle="{{ section.settings.product_3 }}">
            {{ section.settings.overlay_image_3 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-3', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      {% comment %} Grid Item 4 {% endcomment %}
      <div class="grid-item">
        {% if section.settings.image_4 != blank %}
          {# Added width and height attributes to prevent CLS #}
          {{ section.settings.image_4 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% else %}
          <div class="placeholder-image">
            {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {% endif %}
        {% if section.settings.overlay_image_4 != blank %}
          <div class="overlay-button" data-product-handle="{{ section.settings.product_4 }}">
            {{ section.settings.overlay_image_4 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-4', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      {% comment %} Grid Item 5 {% endcomment %}
      <div class="grid-item">
        {% if section.settings.image_5 != blank %}
          {# Added width and height attributes to prevent CLS #}
          {{ section.settings.image_5 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% else %}
          <div class="placeholder-image">
            {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {% endif %}
        {% if section.settings.overlay_image_5 != blank %}
          {# Added width and height attributes to overlay image #}
          <div class="overlay-button" data-product-handle="{{ section.settings.product_5 }}">
            {{ section.settings.overlay_image_5 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-5', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      {% comment %} Grid Item 6 {% endcomment %}
      <div class="grid-item">
        {% if section.settings.image_6 != blank %}
          {# Added width and height attributes to prevent CLS #}
          {{ section.settings.image_6 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% else %}
          <div class="placeholder-image">
            {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {% endif %}
        {% if section.settings.overlay_image_6 != blank %}
          {# Added width and height attributes to overlay image #}
          <div class="overlay-button" data-product-handle="{{ section.settings.product_6 }}">
            {{ section.settings.overlay_image_6 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-6', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>

{% comment %} Product Quick View Modal HTML {% endcomment %}
<div id="product-quick-view-modal" class="product-quick-view-modal" style="display: none;">
  <div class="modal-overlay"></div>
  <div class="modal-content">
    <button class="modal-close-button">&times;</button>
    <div class="modal-body">
      <div class="modal-product-image-wrapper">
        <img src="" alt="Product Image" class="modal-product-image">
      </div>
      <div class="modal-product-details">
        <h3 class="modal-product-title"></h3>
        <p class="modal-product-price"></p>
        <div class="modal-product-description"></div>

        <div class="modal-variant-options">
          {# Variant selectors will be dynamically inserted here by JavaScript #}
        </div>

        <div class="modal-add-to-cart-form">
          <input type="number" class="modal-quantity-selector" value="1" min="1">
          <button class="modal-add-to-cart-button">ADD TO CART â†’</button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Base font for the theme */
  body {
    font-family: 'Jost', sans-serif; /* Your specified font from the dropdown code */
  }

  .image-grid-section {
    padding: 50px 0;
    background-color: white;
  }

  .page-width {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 50px;
    box-sizing: border-box;
  }

  .grid-header {
    margin-bottom: 40px;
    text-align: left;
  }

  .grid-title {
    width: 372px;
    height: 43px;
    font-family: 'Lustria', serif;
    font-weight: 400;
    font-size: 36px;
    line-height: 120%;
    letter-spacing: 0px;
    color: black;
    margin: 0;
  }

  .image-grid-container {
    display: grid;
    grid-template-columns: repeat(3, minmax(250px, 433px));
    gap: 20px;
    justify-content: center;
    align-items: center;
  }

  .grid-item {
    position: relative;
    overflow: hidden;
    background-color: #f0f0f0;
    display: flex;
    justify-content: center;
    align-items: center;
    aspect-ratio: 433 / 444;
    opacity: 1;
  }

  .grid-image {
    width: 100%;
    height: 100%;
    display: block;
    object-fit: cover;
    /* Removed: transition for scale effect on main image */
  }

  .placeholder-image {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .placeholder-svg {
    max-width: 50%;
    max-height: 50%;
    opacity: 0.5;
  }

  /* Overlay button wrapper (for click event) */
  .overlay-button {
    position: absolute;
    width: 100%;
    height: 100%;
    cursor: pointer;
    z-index: 10;
  }

  /* Hover effect for the overlay button, targeting the image inside it */
  .overlay-button:hover .grid-overlay-image {
    transform: translate(-50%, -50%) scale(1.1); /* Slightly enlarge the image */
    transition: transform 0.2s ease-in-out; /* Smooth transition */
  }

  /* General styles for all overlay images */
  .grid-overlay-image {
    position: absolute;
    z-index: 9;
    pointer-events: none; /* Allows clicks to pass through to the parent .overlay-button */
    background: white;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 1;
    width: 22px; /* Fixed size as per your request */
    height: 22px; /* Fixed size as per your request */
    transform: translate(-50%, -50%); /* Centers the image on its top/left point */
    /* Add transition for smooth hover effect if other properties are animated */
    transition: transform 0.2s ease-in-out;
  }

  /* Specific styles for each overlay image - **THESE ARE PIXEL-BASED AND WILL LIKELY CAUSE NON-RESPONSIVE BEHAVIOR.**
     They are kept as per your request for initial 'perfect shape' on larger screens.
     You will need to manually adjust these (e.g., to percentages) in media queries for responsiveness.
  */
  .grid-overlay-image-1 {
    top: 238px;
    left: 256.5px;
  }

  .grid-overlay-image-2 {
    top: 222px;
    left: 355.2px;
  }

  .grid-overlay-image-3 {
    top: 82px;
    left: 261px;
  }

  .grid-overlay-image-4 {
    top: 71px;
    left: 301.5px;
  }

  .grid-overlay-image-5 {
    top: 104px;
    left: 212.5px;
  }

  .grid-overlay-image-6 {
    top: 164px;
    left: 319.5px;
  }


  /* Responsive Design */
  @media screen and (max-width: 1400px) {
    .page-width {
      padding: 0 30px;
    }
    .image-grid-container {
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 15px;
    }
    .grid-item {
      width: auto;
      height: auto;
      aspect-ratio: 433 / 444;
    }
    /* WARNING: Fixed pixel positioning of overlays will be problematic here.
       They will not scale/move proportionally with the images.
       You will need to re-evaluate their positioning to use percentages here
       if you want them responsive.
    */
    .grid-overlay-image { /* Generic responsive adjustments if needed */
      width: 5%; /* Example: small percentage size */
      height: auto;
      top: 15%; /* Example for mobile positioning */
      right: 15%; /* Example for mobile positioning */
      left: auto; /* Override fixed left */
      transform: translate(0,0); /* Remove transform if no longer centering on a point */
    }
  }

  @media screen and (max-width: 768px) {
    .page-width {
      padding: 0 20px;
    }
    .grid-title {
      width: auto;
      height: auto;
      font-size: 28px;
      text-align: center;
      margin: 0 auto 30px auto;
    }
    .grid-header {
      padding: 0 20px;
    }
    .image-grid-container {
      grid-template-columns: 1fr;
      gap: 10px;
    }
    .grid-overlay-image {
      width: 20px;
      height: 20px;
    }

    /* Modal Responsive Styling Adjustments */
    .modal-variant-options {
      margin-top: 15px; /* Add some space above variants on mobile */
    }
    .variant-option-group {
      margin-bottom: 10px; /* Smaller margin between variant groups on mobile */
    }
    .variant-option-group label {
      margin-bottom: 5px; /* Smaller margin for label on mobile */
    }
    .variant-option-values {
      gap: 5px; /* Smaller gap for pills on mobile */
    }
  }

  /* Styles for Product Quick View Modal */
  .product-quick-view-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; /* Ensure it's on top of everything */
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7); /* Dark overlay */
  }

  .modal-content {
    background-color: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    position: relative;
    z-index: 1001;
    /* Updated Fixed Dimensions */
    width: 311px;
    height: 447px;
    transform: rotate(0deg); /* Explicitly set angle */
    opacity: 1; /* Explicitly set opacity */
    /* Removed: max-width and percentage width for fixed dimensions */
    display: flex;
    gap: 15px; /* Reduced gap to accommodate smaller size */
    flex-direction: column; /* Stack image and details vertically for better fit */
    animation: fadeIn 0s ease-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .modal-close-button {
    position: absolute;
    top: 15px;
    right: 15px;
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #333;
  }

  .modal-body {
    display: flex;
    flex-direction: column; /* Ensure vertical stacking for fixed small size */
    width: 100%;
    height: 100%; /* Take full height of modal-content */
    overflow-y: auto; /* Allow scrolling if content overflows */
  }

  .modal-product-image-wrapper {
    flex: 0 0 auto; /* Allow image to take natural height */
    width: 100%; /* Take full width */
    max-height: 50%; /* Limit image height to prevent dominance */
    overflow: hidden; /* Hide overflow if image is too large */
  }

  .modal-product-image {
    width: 100%;
    height: auto;
    display: block;
    border-radius: 4px;
    object-fit: contain; /* Ensure image fits within wrapper */
  }

  .modal-product-details {
    flex: 1; /* Details take remaining height */
    padding-left: 0; /* Remove padding as it's now column */
    padding-top: 10px; /* Add some space between image and details */
    display: flex;
    flex-direction: column;
    overflow-y: auto; /* Enable scrolling for long descriptions/variants */
  }

  .modal-product-title {
    font-size: 1.5em; /* Adjusted font size for smaller modal */
    font-weight: bold;
    margin-bottom: 8px; /* Reduced margin */
    color: black;
  }

  .modal-product-price {
    font-size: 1.2em; /* Adjusted font size for smaller modal */
    color: #333;
    margin-bottom: 15px; /* Reduced margin */
  }

  .modal-product-description {
    font-size: 0.8em; /* Adjusted font size for smaller modal */
    color: #666;
    line-height: 1.5; /* Slightly reduced line height */
    margin-bottom: 15px; /* Reduced margin */
    flex-grow: 1; /* Allows description to take available height */
    overflow-y: auto; /* Enable scrolling for long descriptions */
  }

  .modal-variant-options {
    margin-bottom: 15px; /* Reduced margin */
    display: flex;
    flex-wrap: wrap; /* Allows options to wrap */
    gap: 8px; /* Reduced space between option groups */
  }

  .variant-option-group {
    margin-bottom: 10px; /* Reduced space below each option group */
    width: 100%; /* Ensure each group takes full width */
    height: auto; /* Let height be natural for content */
    display: flex; /* Make group a flex container */
    flex-direction: column; /* Stack label and input/dropdown vertically */
    justify-content: space-between; /* Space out label and input */
  }

  .variant-option-group label {
    display: block;
    font-weight: bold;
    margin-bottom: 5px; /* Reduced margin */
    font-size: 0.8em; /* Adjusted font size */
    color: #333;
  }

  .variant-option-values {
    display: flex;
    flex-wrap: wrap;
    gap: 6px; /* Reduced space between pills */
  }

  .variant-option-value-pill {
    padding: 6px 10px; /* Reduced padding */
    border: 1px solid #ccc;
    border-radius: 20px; /* Pill shape */
    cursor: pointer;
    font-size: 0.8em; /* Adjusted font size */
    background-color: white;
    color: #333;
    transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;
  }

  .variant-option-value-pill.selected {
    background-color: black;
    color: white;
    border-color: black;
  }

  .variant-option-value-pill:hover:not(.selected) {
    background-color: #eee;
  }

  /* Custom dropdown styles from your Component 213 code */
  .custom-dropdown-container {
    position: relative;
    width: 100%; /* Make it responsive to the smaller modal width */
    border: 1px solid #ccc;
    cursor: pointer;
    font-family: 'Jost', sans-serif;
  }

  .custom-dropdown-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 35px; /* Slightly reduced height for smaller modal */
  }

  .custom-dropdown-header span {
    font-size: 14px; /* Slightly reduced font size */
    flex: 1;
    padding: 0 8px; /* Reduced padding */
    line-height: 35px; /* Match height */
  }

  /* Vertical line separator */
  .custom-line {
    border-left: 0.5px solid #000;
    height: 100%;
  }

  .custom-arrow {
    border: solid black;
    border-width: 0 2px 2px 0;
    display: inline-block;
    padding: 3px; /* Reduced padding */
    margin: 0 8px; /* Reduced margin */
    transform: rotate(45deg);
    transition: transform 300ms ease-out; /* smooth arrow rotation */
  }

  .custom-arrow.up {
    transform: rotate(-135deg);
  }

  .custom-dropdown-list {
    display: none;
    position: absolute;
    width: 100%;
    background: #fff;
    z-index: 100;
    border: 1px solid #ccc;
    border-top: none;
    font-family: 'Jost', sans-serif;
  }

  .custom-dropdown-list div {
    padding: 10px; /* Reduced padding */
    text-align: center;
    cursor: pointer;
    border-top: 1px solid #ccc;
    transition: all 300ms ease-out; /* ðŸ‘ˆ smooth hover animation */
  }

  .custom-dropdown-list div:last-child {
    border-bottom: 1px solid #ccc;
  }

  /* Hover effect */
  .custom-dropdown-list div:hover {
    background: #000;
    color: #fff;
  }


  .modal-add-to-cart-form {
    display: flex;
    gap: 10px; /* Reduced gap */
    align-items: center;
    margin-top: auto; /* Pushes form to bottom of details section */
    flex-wrap: wrap; /* Allow wrapping on very small screens */
  }

  .modal-quantity-selector {
    width: 70px; /* Reduced width */
    padding: 8px; /* Reduced padding */
    border: 1px solid #ccc;
    border-radius: 4px;
    text-align: center;
    font-size: 0.9em; /* Adjusted font size */
  }

  .modal-add-to-cart-button {
    background-color: black;
    color: white;
    padding: 10px 18px; /* Reduced padding */
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1em; /* Adjusted font size */
    font-weight: bold;
    transition: background-color 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 6px; /* Reduced space for arrow */
    flex-grow: 1; /* Allow button to grow */
  }

  .modal-add-to-cart-button:hover {
    background-color: #333;
  }

  /* Responsive styles for modal */
  @media screen and (max-width: 768px) {
    .modal-content {
      width: 90%; /* On mobile, override fixed width to be more responsive */
      height: auto; /* On mobile, let height adjust to content */
      padding: 15px; /* Reduced padding */
    }
    .modal-product-image-wrapper,
    .modal-product-details {
      flex: none; /* Remove flex sizing */
      max-width: 100%;
      padding-left: 0;
    }
    .modal-product-details {
      padding-top: 15px; /* Add space between image and details on mobile */
    }
    .modal-add-to-cart-form {
      flex-direction: column;
      width: 100%;
    }
    .modal-quantity-selector {
      width: 100%;
    }
    .modal-add-to-cart-button {
      width: 100%;
    }

    /* Adjust dropdown width on smaller screens */
    .custom-dropdown-container {
      width: 100%;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const quickViewModal = document.getElementById('product-quick-view-modal');
    const modalCloseButton = quickViewModal.querySelector('.modal-close-button');
    const modalOverlay = quickViewModal.querySelector('.modal-overlay');
    const modalProductImage = quickViewModal.querySelector('.modal-product-image');
    const modalProductTitle = quickViewModal.querySelector('.modal-product-title');
    const modalProductPrice = quickViewModal.querySelector('.modal-product-price');
    const modalProductDescription = quickViewModal.querySelector('.modal-product-description');
    const modalVariantOptions = quickViewModal.querySelector('.modal-variant-options');
    const modalQuantitySelector = quickViewModal.querySelector('.modal-quantity-selector');
    const modalAddToCartButton = quickViewModal.querySelector('.modal-add-to-cart-button');

    let currentProductData = null; // Store fetched product data globally for variant selection

    // Helper to format money
    const formatMoney = (cents) => {
      if (typeof Shopify === 'undefined' || !Shopify.currency) {
        // Fallback if Shopify object is not available
        return `$${(cents / 100).toFixed(2)}`;
      }
      return new Intl.NumberFormat(Shopify.currency.active, {
          style: 'currency',
          currency: Shopify.currency.active || 'USD'
      }).format(cents / 100);
    };

    // Function to update modal content based on selected variant
    const updateVariantInfo = () => {
      if (!currentProductData) return;

      const selectedOptions = {};
      let allOptionsSelected = true; // Flag to check if all necessary options have a valid selection

      modalVariantOptions.querySelectorAll('.variant-option-group').forEach(group => {
        const optionName = group.dataset.optionName;

        // Check for custom dropdown selection (Size)
        const customDropdownSelectedSpan = group.querySelector('.custom-dropdown-header span.selected-value');
        if (customDropdownSelectedSpan) {
            const selectedText = customDropdownSelectedSpan.textContent;
            // Only consider it a valid selection if it's not the default "Choose your size"
            if (selectedText && selectedText !== "Choose your size") {
                selectedOptions[optionName] = selectedText;
            } else {
                allOptionsSelected = false; // A custom dropdown option is not yet chosen
            }
        } else {
            // Check for pill selection (other variants like Color)
            const selectedPill = group.querySelector('.variant-option-value-pill.selected');
            if (selectedPill) {
                selectedOptions[optionName] = selectedPill.dataset.value;
            } else {
                allOptionsSelected = false; // A pill option is not yet chosen
            }
        }
      });

      let selectedVariant = null;
      if (allOptionsSelected) { // Only try to find a variant if all options have been selected by the user
          selectedVariant = currentProductData.variants.find(variant => {
            return Object.keys(selectedOptions).every(optionName => {
              const optionIndex = currentProductData.options.findIndex(opt => opt.name === optionName);
              return variant.options[optionIndex] === selectedOptions[optionName];
            });
          });
      }


      if (selectedVariant) {
        modalProductPrice.textContent = formatMoney(selectedVariant.price);
        modalAddToCartButton.dataset.variantId = selectedVariant.id;
        modalAddToCartButton.disabled = selectedVariant.available ? false : true;
        modalAddToCartButton.textContent = selectedVariant.available ? 'ADD TO CART â†’' : 'SOLD OUT';
        modalQuantitySelector.disabled = !selectedVariant.available;

        // Update modal image if variant has a different featured image
        if (selectedVariant.featured_image && selectedVariant.featured_image.src) {
            modalProductImage.src = selectedVariant.featured_image.src;
            if (selectedVariant.featured_image.width && selectedVariant.featured_image.height) {
                modalProductImage.setAttribute('width', selectedVariant.featured_image.width);
                modalProductImage.setAttribute('height', selectedVariant.featured_image.height);
            } else {
                modalProductImage.removeAttribute('width');
                modalProductImage.removeAttribute('height');
            }
        } else if (currentProductData.featured_image && currentProductData.featured_image.src) {
            // Fallback to main product image if variant doesn't have one
            modalProductImage.src = currentProductData.featured_image.src;
            if (currentProductData.featured_image.width && currentProductData.featured_image.height) {
                modalProductImage.setAttribute('width', currentProductData.featured_image.width);
                modalProductImage.setAttribute('height', currentProductData.featured_image.height);
            } else {
                modalProductImage.removeAttribute('width');
                modalProductImage.removeAttribute('height');
            }
        } else {
            modalProductImage.src = 'https://placehold.co/400x400/cccccc/ffffff?text=No+Image';
            modalProductImage.removeAttribute('width');
            modalProductImage.removeAttribute('height');
        }

      } else {
        // If not all options are selected, or no matching variant is found
        modalProductPrice.textContent = ''; // Clear price
        modalAddToCartButton.dataset.variantId = '';
        modalAddToCartButton.disabled = true;
        modalAddToCartButton.textContent = 'SELECT OPTIONS'; // Prompt user to select options
        modalQuantitySelector.disabled = true;
        // Keep the main product image if no variant is specifically selected
        if (currentProductData.featured_image && currentProductData.featured_image.src) {
            modalProductImage.src = currentProductData.featured_image.src;
            if (currentProductData.featured_image.width && currentProductData.featured_image.height) {
                modalProductImage.setAttribute('width', currentProductData.featured_image.width);
                modalProductImage.setAttribute('height', currentProductData.featured_image.height);
            } else {
                modalProductImage.removeAttribute('width');
                modalProductImage.removeAttribute('height');
            }
        } else {
            modalProductImage.src = 'https://placehold.co/400x400/cccccc/ffffff?text=No+Image';
            modalProductImage.removeAttribute('width');
            modalProductImage.removeAttribute('height');
        }
      }
    };

    // Function to generate variant selectors
    const generateVariantSelectors = (productData) => {
      modalVariantOptions.innerHTML = ''; // Clear previous options
      productData.options.forEach((option, optionIndex) => {
        const optionGroup = document.createElement('div');
        optionGroup.classList.add('variant-option-group');
        optionGroup.dataset.optionName = option.name;

        const label = document.createElement('label');
        label.textContent = option.name;
        optionGroup.appendChild(label);

        // Determine if it should be custom dropdown or pills
        if (option.name.toLowerCase() === 'size') { // Use custom dropdown for "Size"
          const dropdownContainer = document.createElement('div');
          dropdownContainer.classList.add('custom-dropdown-container');

          const dropdownHeader = document.createElement('div');
          dropdownHeader.classList.add('custom-dropdown-header');
          dropdownContainer.appendChild(dropdownHeader);

          const selectedSpan = document.createElement('span');
          selectedSpan.classList.add('selected-value'); // Class for easy querying
          selectedSpan.textContent = "Choose your size"; // Initial text
          dropdownHeader.appendChild(selectedSpan);

          const lineDiv = document.createElement('div');
          lineDiv.classList.add('custom-line'); // This is the vertical line
          dropdownHeader.appendChild(lineDiv);

          const arrowI = document.createElement('i');
          arrowI.classList.add('custom-arrow');
          dropdownHeader.appendChild(arrowI);

          const dropdownList = document.createElement('div');
          dropdownList.classList.add('custom-dropdown-list');
          dropdownContainer.appendChild(dropdownList);

          option.values.forEach(value => {
            const listItem = document.createElement('div');
            listItem.textContent = value;
            listItem.dataset.value = value; // Store value for selection
            dropdownList.appendChild(listItem);
          });

          optionGroup.appendChild(dropdownContainer);
          modalVariantOptions.appendChild(optionGroup);

          // Attach custom dropdown specific event listeners
          // Use event delegation or ensure listeners are attached to the correct elements
          dropdownHeader.addEventListener("click", (e) => {
            e.stopPropagation(); // Prevent modal close from immediate click
            dropdownList.style.display = dropdownList.style.display === "block" ? "none" : "block";
            arrowI.classList.toggle("up");
          });

          dropdownList.querySelectorAll("div").forEach(item => {
            item.addEventListener("click", (e) => {
                e.stopPropagation(); // Stop click from bubbling to header or container
                selectedSpan.innerText = item.innerText;
                dropdownList.style.display = "none";
                arrowI.classList.remove("up");
                updateVariantInfo(); // Trigger variant info update on selection
            });
          });

          // A global click listener to close dropdowns when clicking outside should be handled carefully
          // This one should be applied only once and specifically target this dropdown instance
          const handleGlobalClick = (e) => {
            if (!dropdownContainer.contains(e.target) && dropdownList.style.display === "block") {
              dropdownList.style.display = "none";
              arrowI.classList.remove("up");
            }
          };
          // Remove previous listener if exists (e.g., from prior modal opens)
          // Store a unique reference to avoid removing other dropdown's listeners
          dropdownContainer._globalClickListener = handleGlobalClick; // Store reference
          document.addEventListener("click", dropdownContainer._globalClickListener);

        } else { // Use pills for other options (like Color)
          const valuesContainer = document.createElement('div');
          valuesContainer.classList.add('variant-option-values');

          option.values.forEach(value => {
            const pill = document.createElement('span');
            pill.classList.add('variant-option-value-pill');
            pill.textContent = value;
            pill.dataset.value = value;
            valuesContainer.appendChild(pill);

            // Add click listener to pills
            pill.addEventListener('click', () => {
              // Remove 'selected' from all other pills in this group
              valuesContainer.querySelectorAll('.variant-option-value-pill').forEach(p => p.classList.remove('selected'));
              // Add 'selected' to the clicked pill
              pill.classList.add('selected');
              updateVariantInfo(); // Update info based on new selection
            });
          });
          optionGroup.appendChild(valuesContainer);
          modalVariantOptions.appendChild(optionGroup);
        }
      });

      // No automatic selection for size dropdown: it should default to "Choose your size"
      // For pill options, automatically select the first value for convenience
      productData.options.forEach((option, optionIndex) => {
        if (option.name.toLowerCase() !== 'size') {
            const firstPill = modalVariantOptions.querySelector(`.variant-option-group[data-option-name="${option.name}"] .variant-option-value-pill`);
            if (firstPill) {
                firstPill.classList.add('selected');
            }
        }
      });
      updateVariantInfo(); // Initial update after generating
    };


    // Function to open the modal
    const openModal = async (productHandle) => {
      try {
        const response = await fetch(`/products/${productHandle}.js`);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        currentProductData = await response.json(); // Store fetched data

        // Populate modal with product data - ensure .src is accessed
        modalProductImage.src = (currentProductData.featured_image && currentProductData.featured_image.src) ? currentProductData.featured_image.src : 'https://placehold.co/400x400/cccccc/ffffff?text=No+Image';
        modalProductImage.alt = currentProductData.title;

        // Set width and height attributes if available in product data
        if (currentProductData.featured_image && currentProductData.featured_image.width && currentProductData.featured_image.height) {
            modalProductImage.setAttribute('width', currentProductData.featured_image.width);
            modalProductImage.setAttribute('height', currentProductData.featured_image.height);
        } else {
            // Fallback for cases where image dimensions are not available
            modalProductImage.removeAttribute('width');
            modalProductImage.removeAttribute('height');
        }


        modalProductTitle.textContent = currentProductData.title;
        modalProductDescription.innerHTML = currentProductData.description;

        generateVariantSelectors(currentProductData); // Generate and select default variants

        quickViewModal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
      } catch (error) {
        console.error('Error fetching product data:', error);
        console.log('Could not load product details. Please check the product handle and network connection.');
        quickViewModal.style.display = 'none';
      }
    };

    // Function to close the modal
    const closeModal = () => {
      quickViewModal.style.display = 'none';
      document.body.style.overflow = '';
      modalProductImage.src = '';
      modalProductImage.removeAttribute('width'); // Clear width attribute
      modalProductImage.removeAttribute('height'); // Clear height attribute
      modalProductTitle.textContent = '';
      modalProductPrice.textContent = '';
      modalProductDescription.innerHTML = '';
      modalVariantOptions.innerHTML = ''; // Clear variant options on close
      modalQuantitySelector.value = 1;
      modalAddToCartButton.dataset.variantId = '';
      modalAddToCartButton.disabled = false;
      modalAddToCartButton.textContent = 'ADD TO CART â†’'; // Reset button text
      currentProductData = null; // Clear product data

      // Remove the global click listener for the custom dropdown when modal closes
      // This is crucial to prevent multiple listeners accumulating
      modalVariantOptions.querySelectorAll('.custom-dropdown-container').forEach(container => {
        if (container._globalClickListener) {
          document.removeEventListener("click", container._globalClickListener);
          delete container._globalClickListener; // Clean up reference
        }
      });
    };

    // Event listeners for opening modal (all overlays)
    document.querySelectorAll('.overlay-button').forEach(button => {
      button.addEventListener('click', (event) => {
        event.preventDefault();
        const productHandle = button.dataset.productHandle;
        if (productHandle) {
          openModal(productHandle);
        } else {
          console.warn('Overlay button clicked but no product handle found.');
        }
      });
    });

    // Event listeners for closing modal
    modalCloseButton.addEventListener('click', closeModal);
    modalOverlay.addEventListener('click', closeModal);

    // Add to Cart functionality
    modalAddToCartButton.addEventListener('click', async () => {
      const variantId = modalAddToCartButton.dataset.variantId;
      const quantity = parseInt(modalQuantitySelector.value, 10);

      if (!variantId || isNaN(quantity) || quantity <= 0) {
        console.error('Invalid variant ID or quantity.');
        // Using alert for simplicity, consider a custom modal UI for better UX
        // You should implement a custom message box as per instructions.
        alert('Please select all required options and ensure quantity is valid.');
        return;
      }

      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            items: [
              {
                id: variantId,
                quantity: quantity
              }
            ]
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(`Add to cart failed: ${errorData.message || 'Unknown error'}`);
        }

        const cartData = await response.json();
        console.log('Product added to cart:', cartData);
        // Optionally, close the modal and provide user feedback (e.g., small success message, update cart icon)
        closeModal();
        alert('Product added to cart successfully!'); // Using alert for simplicity, consider custom UI

      } catch (error) {
        console.error('Error adding to cart:', error);
        alert('Failed to add product to cart. Please try again.'); // Using alert for simplicity, consider custom UI
      }
    });

  });
</script>

{% schema %}
{
  "name": "Image Grid",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "TISSO VISON IN THE WILD"
    },
    {
      "type": "image_picker",
      "id": "image_1",
      "label": "Image 1 (Top Left)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_1",
      "label": "Overlay Image 1 (Optional)"
    },
    {
      "type": "product",
      "id": "product_1",
      "label": "Link Product 1"
    },
    {
      "type": "image_picker",
      "id": "image_2",
      "label": "Image 2 (Top Middle)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_2",
      "label": "Overlay Image 2 (Optional)"
    },
    {
      "type": "product",
      "id": "product_2",
      "label": "Link Product 2"
    },
    {
      "type": "image_picker",
      "id": "image_3",
      "label": "Image 3 (Top Right)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_3",
      "label": "Overlay Image 3 (Optional)"
    },
    {
      "type": "product",
      "id": "product_3",
      "label": "Link Product 3"
    },
    {
      "type": "image_picker",
      "id": "image_4",
      "label": "Image 4 (Bottom Left)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_4",
      "label": "Overlay Image 4 (Optional)"
    },
    {
      "type": "product",
      "id": "product_4",
      "label": "Link Product 4"
    },
    {
      "type": "image_picker",
      "id": "image_5",
      "label": "Image 5 (Bottom Middle)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_5",
      "label": "Overlay Image 5 (Optional)"
    },
    {
      "type": "product",
      "id": "product_5",
      "label": "Link Product 5"
    },
    {
      "type": "image_picker",
      "id": "image_6",
      "label": "Image 6 (Bottom Right)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_6",
      "label": "Overlay Image 6 (Optional)"
    },
    {
      "type": "product",
      "id": "product_6",
      "label": "Link Product 6"
    }
  ],
  "presets": [
    {
      "name": "Image Grid Section",
      "category": "Image",
      "settings": {
        "title": "TISSO VISON IN THE WILD"
      }
    }
  ]
}
{% endschema %}
