{% comment %}
  This section creates a responsive image grid with optional overlay images and product links.
  It also includes a product quick-view modal with custom color and size selection dropdowns.
{% endcomment %}

<div class="image-grid-section">
  <div class="page-width">
    <div class="grid-header">
      <h2 class="grid-title">{{ section.settings.title }}</h2>
    </div>

    <div class="image-grid-container">
      {%- for i in (1..6) -%}
        {%- assign image_setting = 'image_' | append: i -%}
        {%- assign overlay_image_setting = 'overlay_image_' | append: i -%}
        {%- assign product_setting = 'product_' | append: i -%}

        {%- if section.settings[image_setting] != blank -%}
          <div class="grid-item">
            {{ section.settings[image_setting] | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615, loading: 'lazy' }}
            {%- if section.settings[overlay_image_setting] != blank and section.settings[product_setting] != blank -%}
              <div class="overlay-button"
                   data-product-handle="{{ section.settings[product_setting].handle }}"
                   data-grid-image-url="{{ section.settings[image_setting] | image_url: width: 400 }}">
                {{ section.settings[overlay_image_setting] | image_url: width: 22 | image_tag: class: 'grid-overlay-image', width: 22, height: 22, loading: 'lazy' }}
              </div>
            {%- endif -%}
          </div>
        {%- endif -%}
      {%- endfor -%}
    </div>
  </div>
</div>

{% comment %} Product Quick View Modal HTML {% endcomment %}
<div id="product-quick-view-modal" class="product-quick-view-modal" style="display: none;">
  <div class="modal-overlay"></div>
  <div class="modal-content">
    <button class="modal-close-button">&times;</button>
    <div class="modal-elements-container">
        <div class="modal-single-image">
            <img id="modal-main-product-image" src="" alt="Product Image" width="271" height="200">
        </div>

        <h3 class="modal-product-title"></h3>
        <p class="modal-product-price"></p>
        <div class="modal-product-description"></div>

        <div class="modal-variant-options">
         </div>

        <div class="modal-add-to-cart-form">
          <button class="modal-add-to-cart-button">ADD TO CART â†’</button>
        </div>
        <p class="add-to-cart-success-message" style="display: none; color: green; text-align: center; margin-top: 10px;">Item added to cart!</p>
    </div>
  </div>
</div>


<style>
  /* Base font for the theme */
  body {
    font-family: 'Jost', sans-serif;
  }

  .image-grid-section {
    padding: 50px 0;
    background-color: white;
  }

  .page-width {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 50px;
    box-sizing: border-box;
  }

  .grid-header {
    margin-bottom: 40px;
    text-align: left;
  }

  .grid-title {
    width: 372px;
    height: 43px;
    font-family: 'Lustria', serif;
    font-weight: 400;
    font-size: 36px;
    line-height: 120%;
    letter-spacing: 0px;
    color: black;
    margin: 0;
  }

  .image-grid-container {
    display: grid;
    grid-template-columns: repeat(3, minmax(250px, 433px));
    gap: 20px;
    justify-content: center;
    align-items: center;
  }

  .grid-item {
    position: relative;
    overflow: hidden;
    background-color: #f0f0f0;
    display: flex;
    justify-content: center;
    align-items: center;
    aspect-ratio: 433 / 444;
    opacity: 1;
  }

  .grid-image {
    width: 100%;
    height: 100%;
    display: block;
    object-fit: cover;
  }

  .placeholder-image {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .placeholder-svg {
    max-width: 50%;
    max-height: 50%;
    opacity: 0.5;
  }

  /* Overlay button wrapper (for click event) */
  .overlay-button {
    position: absolute;
    width: 100%;
    height: 100%;
    cursor: pointer;
    z-index: 10;
  }

  /* Hover effect for the overlay button, targeting the image inside it */
  .overlay-button:hover .grid-overlay-image {
    transform: translate(-50%, -50%) scale(1.1);
    transition: transform 0.2s ease-in-out;
  }

  /* General styles for all overlay images */
  .grid-overlay-image {
    position: absolute;
    z-index: 9;
    pointer-events: none;
    background: white;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 1;
    width: 22px;
    height: 22px;
    transform: translate(-50%, -50%);
    transition: transform 0.2s ease-in-out;
  }


  .grid-overlay-image-1 {
    top: 238px;
    left: 256.5px;
  }

  .grid-overlay-image-2 {
    top: 222px;
    left: 355.2px;
  }

  .grid-overlay-image-3 {
    top: 82px;
    left: 261px;
  }

  .grid-overlay-image-4 {
    top: 71px;
    left: 301.5px;
  }

  .grid-overlay-image-5 {
    top: 104px;
    left: 212.5px;
  }

  .grid-overlay-image-6 {
    top: 164px;
    left: 319.5px;
  }


  /* Responsive Design */
  @media screen and (max-width: 1400px) {
    .page-width {
      padding: 0 30px;
    }
    .image-grid-container {
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 15px;
    }
    .grid-item {
      width: auto;
      height: auto;
      aspect-ratio: 433 / 444;
    }

    .grid-overlay-image { /* Generic responsive adjustments if needed */
      width: 5%;
      height: auto;
      top: 15%;
      right: 15%;
      left: auto;
      transform: translate(0,0);
    }
  }

  @media screen and (max-width: 768px) {
    .page-width {
      padding: 0 20px;
    }
    .grid-title {
      width: auto;
      height: auto;
      font-size: 28px;
      text-align: center;
      margin: 0 auto 30px auto;
    }
    .grid-header {
      padding: 0 20px;
    }
    .image-grid-container {
      grid-template-columns: 1fr;
      gap: 10px;
    }
    .grid-overlay-image {
      width: 20px;
      height: 20px;
    }

    /* Modal Responsive Styling Adjustments */
    .modal-content {
      width: 90%;
      height: auto;
      padding: 15px;
    }

    .modal-elements-container {
        width: 100%;
        height: auto;
        overflow-y: visible;
        padding: 0;
    }

    /* Single image adjustments for mobile */
    .modal-single-image {
        width: 100%;
        height: auto;
        margin-bottom: 15px; /* Re-add some margin for mobile spacing */
        aspect-ratio: 120 / 140; /* Maintain aspect ratio */
    }
    .modal-single-image img {
      width: 100%;
      height: 100%;
      object-fit: contain;
    }

    .modal-product-title,
    .modal-product-price,
    .modal-product-description,
    .modal-variant-options,
    .modal-add-to-cart-form {
        width: 100%;
        height: auto;
        margin-left: 0;
        margin-top: 0;
        padding: 0;
    }

    .modal-product-title {
        font-size: 1.5em;
    }
    .modal-product-price {
        font-size: 1.2em;
    }
    .modal-product-description {
        font-size: 0.9em;
    }

    .modal-add-to-cart-form {
      flex-direction: column;
      width: 100%;
    }
    .modal-add-to-cart-button {
      width: 100%;
    }

    .variant-option-group {
      margin-bottom: 10px;
    }
    .variant-option-group label {
      margin-bottom: 5px;
    }

    /* Adjust color selector width for mobile to be flexible */
    fieldset.color-container {
      width: 100%;
    }
    .color-box {
      width: 100%; /* Make it responsive */
      height: 40px; /* Adjust height as needed */
    }
    .color-swatch {
      width: 10px; /* Smaller swatch on mobile */
    }
  }

  /* Styles for Product Quick View Modal */
  .product-quick-view-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
  }

  .modal-content {
    background-color: white;
    padding: 20px;
    border-radius: 0;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    position: relative;
    z-index: 1001;
    width: 350px;
    max-height: 90vh;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 15px;
    animation: fadeIn 0.3s ease-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .modal-close-button {
    position: absolute;
    top: 10px;
    right: 10px;
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #333;
    z-index: 1003;
  }

  .modal-elements-container {
    display: flex;
    flex-direction: column;
    gap: 15px;
    width: 100%;
    height: auto;
    overflow: visible;
  }

  /* --- Single Image Styles --- */
  .modal-single-image {
    width: 100%;
    height: 200px;
    overflow: hidden;
    border-radius: 0;
    margin-bottom: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #f0f0f0;
  }

  .modal-single-image img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    border-radius: 0;
  }

  /* TEXT CONTEXTS - NOW FLOW-BASED */
  .modal-product-title {
    width: 100%;
    height: auto;
    font-family: 'Jost', sans-serif;
    font-weight: 300;
    font-size: 16px;
    line-height: 120%;
    letter-spacing: 0px;
    text-align: left;
    color: black;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: normal;
    z-index: 2;
  }

  .modal-product-price {
    width: auto;
    height: auto;
    padding: 5px 8px;
    font-family: 'Lustria', serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 120%;
    letter-spacing: 0px;
    background: #000000;
    color: #FFFFFF;
    text-align: left;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    z-index: 2;
    align-self: flex-start;
  }

  .modal-product-description {
    width: 100%;
    height: auto;
    font-family: 'Jost', sans-serif;
    font-weight: 300;
    font-size: 14px;
    line-height: 110%;
    letter-spacing: -1%;
    text-align: left;
    color: #666;
    overflow-y: hidden;
    z-index: 2;
  }

  .modal-variant-options {
    width: 100%;
    height: auto;
    overflow-y: visible;
    display: flex;
    flex-direction: column;
    gap: 15px;
    z-index: 2;
  }

  .variant-option-group {
    margin-bottom: 0;
    width: 100%;
    height: auto;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
  }

  .variant-option-group label {
    display: block;
    font-weight: bold;
    margin-bottom: 5px;
    font-size: 0.8em;
    color: #333;
  }

  /* Styles for default pill-style variant selectors */
  .variant-option-values {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .variant-option-value-pill {
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: pointer;
    background-color: #f9f9f9;
    transition: all 0.2s ease;
    font-size: 0.9em;
  }

  .variant-option-value-pill:hover {
    background-color: #e0e0e0;
    border-color: #aaa;
  }

  .variant-option-value-pill.selected {
    background-color: #000;
    color: white;
    border-color: #000;
  }

  .modal-add-to-cart-form {
    width: 100%;
    display: flex;
    gap: 10px;
    align-items: center;
    flex-wrap: wrap;
    z-index: 2;
    margin-top: 5px;
  }

  .modal-add-to-cart-button {
    background-color: black;
    color: white;
    padding: 10px 18px;
    border: none;
    border-radius: 0;
    cursor: pointer;
    font-size: 1em;
    font-weight: bold;
    transition: background-color 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
    flex-grow: 1;
    width: 100%;
  }

  .modal-add-to-cart-button:hover {
    background-color: #333;
  }

  /* --- CUSTOM COLOR SELECTOR STYLES (from your provided code) --- */
  fieldset.color-container {
    border: none;
    padding: 0;
    margin: 0;
    min-width: 0;
    width: 100%; /* Ensure it spans the modal content width */
  }

  fieldset.color-container legend {
    font-size: 14px;
    font-weight: 400;
    margin-bottom: 5px;
    padding: 0;
  }

  /* Outer container */
  .color-box {
    position: relative;
    display: flex;
    width: 271px; /* Your specified fixed width */
    max-width: 100%; /* Ensure it shrinks on smaller screens */
    height: 40.4413px;
    border: 0.5px solid #000;
    box-sizing: border-box; /* Corrected typo here */
    overflow: hidden;
    align-self: flex-start; /* Align to the left in flex container */
  }

  /* Sliding background (always black) */
  .slider {
    position: absolute;
    top: 0;
    left: 0;
    width: 50%;
    height: 100%;
    background: #000;
    transition: transform 0.4s ease;
    z-index: 1;
    display: none; /* Keep initially hidden */
  }

  .slider.right {
    transform: translateX(100%);
  }

  /* Each option */
  .color-option {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 18px;
    text-transform: capitalize;
    position: relative;
    cursor: pointer;
    z-index: 2; /* above slider */
    color: #000; /* default text */
    transition: color 0.3s ease;
  }

  /* Active state text turns white */
  .color-option.active {
    color: #fff !important;
  }

  /* Swatch styles */
  .color-swatch {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    border-right: 0.5px solid #000;
    pointer-events: none;
    z-index: 3;
  }

  .blue-swatch {
    width: 5.8071px;
    background: #0D499F; /* Blue swatch */
  }

  .black-swatch {
    width: 4.8392px;
    background: #000; /* Black swatch */
  }

  .white-swatch {
    width: 5.8071px;
    background: #fff; /* White swatch */
  }

  .red-swatch {
    width: 5.8071px;
    background: #B20F36; /* Red swatch */
  }

  .grey-swatch {
    width: 4.8392px;
    background: #AFAFB7; /* Grey swatch */
  }


  /* CUSTOM DROPDOWN CSS */
  .dropdown {
    position: relative;
    width: 100%; /* Full width of its container */
    border: 1px solid #ccc;
    cursor: pointer;
    font-family: 'Jost', sans-serif;
    margin-top: 5px; /* Added for spacing */
  }

  .dropdown-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 40px;
  }

  .dropdown-header span {
    font-size: 16px;
    flex: 1;
    padding: 0 10px;
    line-height: 40px;
  }

  /* Vertical line separator */
  .line {
    border-left: 0.5px solid #000;
    height: 100%;
  }

  .arrow {
    border: solid black;
    border-width: 0 2px 2px 0;
    display: inline-block;
    padding: 4px;
    margin: 0 10px;
    transform: rotate(45deg);
    transition: transform 300ms ease-out; /* smooth arrow rotation */
  }

  .arrow.up {
    transform: rotate(-135deg);
  }

  .dropdown-list {
    display: none;
    position: absolute; /* This makes it float over content */
    top: 100%; /* Position right below the header */
    width: 100%;
    background: #fff;
    z-index: 100;
    border: 1px solid #ccc;
    border-top: none;
    font-family: 'Jost', sans-serif;
    max-height: 150px;
    overflow-y: auto;
  }

  .dropdown-list div {
    padding: 12px;
    text-align: center;
    cursor: pointer;
    border-top: 1px solid #ccc;
    transition: all 300ms ease-out; /* ðŸ‘ˆ smooth hover animation */
  }

  .dropdown-list div:last-child {
    border-bottom: 1px solid #ccc;
  }

  /* Hover effect */
  .dropdown-list div:hover {
    background: #000;
    color: #fff;
  }

  /* Custom Message Box styles */
  #custom-message-box {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: #fff;
    padding: 20px 30px;
    border-radius: 8px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    z-index: 2000;
    text-align: center;
    font-family: 'Jost', sans-serif;
    color: #333;
    font-size: 1.1rem;
    max-width: 300px;
  }

  #custom-message-box button {
    margin-top: 15px;
    padding: 8px 15px;
    background-color: #000;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  #custom-message-box button:hover {
    background-color: #333;
  }

</style>

<script>
  // Access the product handles from liquid settings
  const product1Handle = "{{ section.settings.product_1.handle }}";
  const product2Handle = "{{ section.settings.product_2.handle }}";
  const product3Handle = "{{ section.settings.product_3.handle }}";
  const product4Handle = "{{ section.settings.product_4.handle }}"; // Added product_4 handle
  const product5Handle = "{{ section.settings.product_5.handle }}";
  const product6Handle = "{{ section.settings.product_6.handle }}";

  document.addEventListener('DOMContentLoaded', () => {
    const quickViewModal = document.getElementById('product-quick-view-modal');
    const modalCloseButton = quickViewModal.querySelector('.modal-close-button');
    const modalOverlay = quickViewModal.querySelector('.modal-overlay');
    const modalProductTitle = quickViewModal.querySelector('.modal-product-title');
    const modalProductPrice = quickViewModal.querySelector('.modal-product-price');
    const modalProductDescription = quickViewModal.querySelector('.modal-product-description');
    const modalVariantOptions = quickViewModal.querySelector('.modal-variant-options');
    const modalAddToCartButton = quickViewModal.querySelector('.modal-add-to-cart-button');
    const modalMainProductImage = quickViewModal.querySelector('#modal-main-product-image');
    const addToCartSuccessMessage = quickViewModal.querySelector('.add-to-cart-success-message'); // Success message element

    let currentProductData = null;
    let selectedOptionsMap = {}; // To store selected options for the current product

    // --- Custom Message Box Function (replaces alert()) ---
    function displayMessageBox(message, type = 'info') {
      const existingMessageBox = document.getElementById('custom-message-box');
      if (existingMessageBox) {
        existingMessageBox.remove();
      }
      const messageBox = document.createElement('div');
      messageBox.id = 'custom-message-box';

      // Basic styling for the message box
      let bgColor = '#f0f8ff'; // Light blue for info
      let textColor = '#333';
      if (type === 'error') {
        bgColor = '#ffebee'; // Light red for error
        textColor = '#d32f2f';
      } else if (type === 'success') {
        bgColor = '#e8f5e9'; // Light green for success
        textColor = '#2e7d32';
      }

      messageBox.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: ${bgColor};
        padding: 20px 30px;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        z-index: 2000;
        text-align: center;
        font-family: 'Jost', sans-serif;
        color: ${textColor};
        font-size: 1.1rem;
        max-width: 300px;
        border: 1px solid ${textColor};
      `;
      messageBox.innerHTML = `
        <p>${message}</p>
        <button>OK</button>
      `;
      document.body.appendChild(messageBox);
      messageBox.querySelector('button').addEventListener('click', () => {
        messageBox.remove();
      });
      setTimeout(() => {
          if (messageBox && messageBox.parentNode) {
              messageBox.remove();
          }
      }, 5000);
    }

    // Helper to format money
    const formatMoney = (cents) => {
      const numericCents = parseFloat(cents) || 0;

      if (typeof Shopify === 'undefined' || !Shopify.currency || !Shopify.currency.active) {
        // Fallback for when Shopify.currency is not fully loaded or available
        return `$${(numericCents / 100).toFixed(2)}`;
      }
      return new Intl.NumberFormat(navigator.language, { // Use navigator.language for user's locale
          style: 'currency',
          currency: Shopify.currency.active
      }).format(numericCents / 100);
    };

    // Function to update modal content based on selected variant
    window.updateVariantInfo = () => {
      if (!currentProductData) return;

      let allOptionsSelected = true;
      const currentSelectedOptions = {}; // Temporary map for current selections

      currentProductData.options.forEach(option => {
          const optionName = option.name;
          const selectedValue = selectedOptionsMap[optionName];

          if (!selectedValue || selectedValue === 'Choose your size') {
              allOptionsSelected = false;
          } else {
              currentSelectedOptions[optionName] = selectedValue;
          }
      });

      let selectedVariant = null;
      if (allOptionsSelected) {
          selectedVariant = currentProductData.variants.find(variant => {
              return currentProductData.options.every((option, index) => {
                  return variant.options[index] === currentSelectedOptions[option.name];
              });
          });
      }

      if (selectedVariant) {
        modalProductPrice.textContent = formatMoney(selectedVariant.price);
        modalAddToCartButton.dataset.variantId = selectedVariant.id;
        modalAddToCartButton.disabled = selectedVariant.available ? false : true;
        modalAddToCartButton.textContent = selectedVariant.available ? 'ADD TO CART â†’' : 'SOLD OUT';

        // Update main product image based on selected variant if available
        if (selectedVariant.featured_image && selectedVariant.featured_image.src) {
            modalMainProductImage.src = selectedVariant.featured_image.src;
            modalMainProductImage.alt = selectedVariant.featured_image.alt || currentProductData.title;
        } else if (currentProductData.featured_image && currentProductData.featured_image.src) {
            // Fallback to product featured image
            modalMainProductImage.src = currentProductData.featured_image.src;
            modalMainProductImage.alt = currentProductData.featured_image.alt || currentProductData.title;
        } else if (currentProductData.images && currentProductData.images.length > 0) {
            // Fallback to the first product image if no variant image
            modalMainProductImage.src = currentProductData.images[0].src;
            modalMainProductImage.alt = currentProductData.images[0].alt || currentProductData.title;
        } else {
            // Generic fallback if no images at all
            modalMainProductImage.src = 'https://placehold.co/400x400/cccccc/ffffff?text=No+Image';
            modalMainProductImage.alt = 'No image available';
        }

      } else {
        modalProductPrice.textContent = formatMoney(currentProductData.price || 0); // Show default product price if no variant selected
        modalAddToCartButton.dataset.variantId = '';
        modalAddToCartButton.disabled = true;
        modalAddToCartButton.textContent = 'SELECT OPTIONS'; // Indicate options need selection
      }
    };

    // Function to generate variant selectors
    const generateVariantSelectors = (productData, currentProductHandle) => {
      modalVariantOptions.innerHTML = '';
      selectedOptionsMap = {}; // Reset selected options for new product

      // Initial population of selectedOptionsMap with first available values
      // This ensures a default variant is selected if possible upon modal open
      currentProductData.options.forEach((option, index) => {
          // Find the first variant that has this option value
          const firstAvailableValue = currentProductData.variants.find(v => v.options[index] === option.values[0]) ? option.values[0] : null;
          selectedOptionsMap[option.name] = firstAvailableValue || (option.name.toLowerCase().includes('size') ? 'Choose your size' : null);
      });

      let optionsToRender = [...productData.options];

      // Apply reordering for all products EXCEPT product_1
      if (currentProductHandle !== product1Handle) {
        const colorOption = optionsToRender.find(opt => opt.name.toLowerCase() === 'color');
        const sizeOption = optionsToRender.find(opt => opt.name.toLowerCase().includes('size'));

        if (colorOption && sizeOption) {
          optionsToRender = optionsToRender.filter(opt =>
            opt.name.toLowerCase() !== 'color' && !opt.name.toLowerCase().includes('size')
          );
          optionsToRender.unshift(colorOption); // Color comes first
          optionsToRender.splice(1, 0, sizeOption); // Size comes second
        }
      }

      optionsToRender.forEach((option) => {
        const optionGroup = document.createElement('div');
        optionGroup.classList.add('variant-option-group');
        optionGroup.dataset.optionName = option.name;

        const label = document.createElement('label');
        label.textContent = option.name;
        optionGroup.appendChild(label);

        if (option.name.toLowerCase() === 'color') {
          const fieldset = document.createElement('fieldset');
          fieldset.classList.add('color-container');

          let colorBoxHTML = ''; // Initialize HTML string for color box

          // Determine which color options to show based on product handle
          let colors = [];
          if (currentProductHandle === product2Handle || currentProductHandle === product6Handle) {
            colors = [{name: 'blue', class: 'blue-swatch', value: 'Blue'}, {name: 'black', class: 'black-swatch', value: 'Black'}];
          } else if (currentProductHandle === product3Handle) {
            colors = [{name: 'red', class: 'red-swatch', value: 'Red'}, {name: 'grey', class: 'grey-swatch', value: 'Grey'}];
          } else if (currentProductHandle === product5Handle) {
            colors = [{name: 'grey', class: 'grey-swatch', value: 'Grey'}, {name: 'black', class: 'black-swatch', value: 'Black'}];
          } else { // Default for product 1 and others
            colors = [{name: 'white', class: 'white-swatch', value: 'White'}, {name: 'black', class: 'black-swatch', value: 'Black'}];
          }

          colorBoxHTML += `<div class="color-box"><div class="slider" id="slider-${currentProductHandle}" style="display:none;"></div>`;
          colors.forEach((col, idx) => {
              colorBoxHTML += `
                  <div class="color-option" id="colorOption${idx + 1}-${currentProductHandle}" data-value="${col.value}">
                      <span class="color-swatch ${col.class}"></span>
                      ${col.name.charAt(0).toUpperCase() + col.name.slice(1)}
                  </div>
              `;
          });
          colorBoxHTML += `</div>`;

          fieldset.insertAdjacentHTML('beforeend', colorBoxHTML);
          optionGroup.appendChild(fieldset);
          modalVariantOptions.appendChild(optionGroup);

          // Get the dynamically created elements for event listeners
          const colorOptionsDivs = fieldset.querySelectorAll('.color-option');
          const slider = document.getElementById(`slider-${currentProductHandle}`);

          colorOptionsDivs.forEach((colorOption, index) => {
              colorOption.addEventListener("click", () => {
                  slider.style.display = "block";
                  colorOptionsDivs.forEach(opt => opt.classList.remove('active'));
                  colorOption.classList.add('active');
                  selectedOptionsMap[option.name] = colorOption.dataset.value;

                  if (index === 0) { // First option (left)
                      slider.classList.remove("right");
                  } else { // Second option (right)
                      slider.classList.add("right");
                  }
                  updateVariantInfo();
              });

              // Set initial active state if a default color is pre-selected
              if (selectedOptionsMap[option.name] === colorOption.dataset.value) {
                  colorOption.classList.add('active');
                  slider.style.display = "block";
                  if (index === 1) { // If the second color is default
                      slider.classList.add("right");
                  }
              }
          });

        } else if (option.name.toLowerCase().includes('size')) {
          // CUSTOM DROPDOWN FOR SIZE
          const dropdownDiv = document.createElement('div');
          dropdownDiv.classList.add('dropdown');
          dropdownDiv.id = `dropdown-${option.name.toLowerCase().replace(/\s/g, '-')}-${currentProductHandle}`;

          const initialSelectedSizeText = selectedOptionsMap[option.name] || 'Choose your size';

          dropdownDiv.innerHTML = `
              <div class="dropdown-header">
                  <span data-value="${initialSelectedSizeText}">${initialSelectedSizeText}</span>
                  <div class="line"></div>
                  <i class="arrow"></i>
              </div>
              <div class="dropdown-list">
                  ${option.values.map(val => `<div>${val}</div>`).join('')}
              </div>
          `;
          optionGroup.appendChild(dropdownDiv);
          modalVariantOptions.appendChild(optionGroup);

          const dropdownElement = dropdownDiv;
          const arrowElement = dropdownDiv.querySelector('.arrow');
          const listElement = dropdownDiv.querySelector('.dropdown-list');
          const selectedElement = dropdownDiv.querySelector('.dropdown-header span');

          dropdownElement.addEventListener("click", (e) => {
            e.stopPropagation();
            listElement.style.display = listElement.style.display === "block" ? "none" : "block";
            arrowElement.classList.toggle("up");
          });

          listElement.querySelectorAll("div").forEach(item => {
            item.addEventListener("click", (e) => {
              e.stopPropagation();
              selectedElement.innerText = item.innerText;
              selectedElement.dataset.value = item.innerText;
              listElement.style.display = "none";
              arrowElement.classList.remove("up");
              selectedOptionsMap[option.name] = item.innerText;
              updateVariantInfo();
            });
          });
          // Set initial selection for size dropdown
          if (selectedOptionsMap[option.name] && selectedOptionsMap[option.name] !== 'Choose your size') {
              selectedElement.innerText = selectedOptionsMap[option.name];
              selectedElement.dataset.value = selectedOptionsMap[option.name];
          } else {
              selectedElement.innerText = 'Choose your size';
              selectedElement.dataset.value = 'Choose your size';
          }

        } else {
          // For all other variants (pill selection)
          const valuesContainer = document.createElement('div');
          valuesContainer.classList.add('variant-option-values');

          option.values.forEach(value => {
            const pill = document.createElement('span');
            pill.classList.add('variant-option-value-pill');
            pill.textContent = value;
            pill.dataset.value = value;
            valuesContainer.appendChild(pill);

            pill.addEventListener('click', () => {
              valuesContainer.querySelectorAll('.variant-option-value-pill').forEach(p => p.classList.remove('selected'));
              pill.classList.add('selected');
              selectedOptionsMap[option.name] = value;
              updateVariantInfo();
            });

            // Set initial active state if a default value is pre-selected
            if (selectedOptionsMap[option.name] === value) {
                pill.classList.add('selected');
            }
          });
          optionGroup.appendChild(valuesContainer);
          modalVariantOptions.appendChild(optionGroup);
        }
      });

      updateVariantInfo(); // Initial update after rendering all options
    };


    // Function to open the modal
    const openModal = async (productHandle, gridImageUrl) => {
      try {
        console.log('Opening modal for product handle:', productHandle);
        console.log('Grid image URL provided:', gridImageUrl);

        const response = await fetch(`/products/${productHandle}.js`);
        if (!response.ok) {
          let errorMessage = `HTTP error! status: ${response.status}`;
          try {
            const errorBody = await response.json();
            if (errorBody && errorBody.message) {
              errorMessage += ` - ${errorBody.message}`;
            }
          } catch (e) {
            console.error('Error parsing error response:', e);
          }
          throw new Error(errorMessage);
        }
        currentProductData = await response.json();
        console.log('Fetched product data:', currentProductData);

        // Set the main product image from gridImageUrl first, then variant image, then first product image
        if (gridImageUrl) {
            modalMainProductImage.src = gridImageUrl;
            modalMainProductImage.alt = currentProductData.title;
        } else if (currentProductData.featured_image && currentProductData.featured_image.src) {
            modalMainProductImage.src = currentProductData.featured_image.src;
            modalMainProductImage.alt = currentProductData.featured_image.alt || currentProductData.title;
        } else if (currentProductData.images && currentProductData.images.length > 0) {
            modalMainProductImage.src = currentProductData.images[0].src;
            modalMainProductImage.alt = currentProductData.images[0].alt || currentProductData.title;
        } else {
            modalMainProductImage.src = 'https://placehold.co/400x400/cccccc/ffffff?text=No+Image';
            modalMainProductImage.alt = 'No image available';
        }

        modalProductTitle.textContent = currentProductData.title;
        modalProductPrice.textContent = formatMoney(currentProductData.price);
        modalProductDescription.innerHTML = currentProductData.description;

        // Pass the current product handle to the variant selector generator
        generateVariantSelectors(currentProductData, productHandle);

        quickViewModal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
      } catch (error) {
        console.error('Error fetching product data:', error);
        displayMessageBox(`Could not load product details. Please check the product handle and network connection, or if the product exists. Error: ${error.message}`, 'error');
        quickViewModal.style.display = 'none';
      }
    };

    // Function to close the modal
    const closeModal = () => {
      quickViewModal.style.display = 'none';
      document.body.style.overflow = '';
      modalMainProductImage.src = '';
      modalMainProductImage.alt = '';
      modalProductTitle.textContent = '';
      modalProductPrice.textContent = '';
      modalProductDescription.innerHTML = '';
      modalVariantOptions.innerHTML = ''; // Clear variant options

      // Reset all custom dropdowns
      quickViewModal.querySelectorAll('.dropdown').forEach(dropdownElement => {
        const selectedElement = dropdownElement.querySelector('.dropdown-header span');
        const listElement = dropdownElement.querySelector('.dropdown-list');
        const arrowElement = dropdownElement.querySelector('.arrow');

        if (selectedElement) {
          selectedElement.innerText = 'Choose your size';
          selectedElement.dataset.value = 'Choose your size';
        }
        if (listElement) {
          listElement.style.display = 'none';
        }
        if (arrowElement) {
          arrowElement.classList.remove('up');
        }
      });

      modalAddToCartButton.dataset.variantId = '';
      modalAddToCartButton.disabled = false;
      modalAddToCartButton.textContent = 'ADD TO CART â†’';
      addToCartSuccessMessage.style.display = 'none'; // Hide success message
      currentProductData = null;
      selectedOptionsMap = {}; // Clear selected options
    };


    // Event listeners for opening modal (all overlays)
    document.querySelectorAll('.overlay-button').forEach(button => {
      button.addEventListener('click', (event) => {
        event.preventDefault();
        const productHandle = button.dataset.productHandle;
        const gridImageUrl = button.dataset.gridImageUrl;
        if (productHandle) {
          openModal(productHandle, gridImageUrl);
        } else {
          console.warn('Overlay button clicked but no product handle found.');
          displayMessageBox('No product linked to this overlay.', 'error');
        }
      });
    });

    // Event listeners for closing quick view modal
    modalCloseButton.addEventListener('click', closeModal);
    modalOverlay.addEventListener('click', closeModal);

    // Global click listener to close dropdowns if clicked outside
    window.addEventListener("click", (e) => {
      quickViewModal.querySelectorAll('.dropdown').forEach(dropdownElement => {
        if (!dropdownElement.contains(e.target)) {
          dropdownElement.querySelector('.dropdown-list').style.display = "none";
          dropdownElement.querySelector('.arrow').classList.remove("up");
        }
      });
    });

    // --- Add to Cart functionality ---
    modalAddToCartButton.addEventListener('click', async () => {
      const variantId = modalAddToCartButton.dataset.variantId;
      const quantity = 1;

      if (!variantId || modalAddToCartButton.disabled) {
        console.error('Invalid variant ID or button is disabled.');
        displayMessageBox('Please select all available options before adding to cart.', 'error');
        return;
      }

      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            items: [
              {
                id: variantId,
                quantity: quantity
              }
            ]
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(`Add to cart failed: ${errorData.message || 'Unknown error'}`);
        }

        const cartData = await response.json();
        console.log('Product added to cart:', cartData);
        addToCartSuccessMessage.style.display = 'block'; // Show success message
        setTimeout(() => {
            closeModal();
            addToCartSuccessMessage.style.display = 'none'; // Hide success message after closing modal
            // Optional: Dispatch a custom event to notify other parts of your theme (e.g., mini-cart)
            document.dispatchEvent(new CustomEvent('cart:item_added', {
                detail: {
                    variantId: variantId,
                    quantity: quantity,
                    cart: cartData
                }
            }));
        }, 1500); // Hide success message and close modal after 1.5 seconds

      } catch (error) {
        console.error('Error adding to cart:', error);
        displayMessageBox(`Failed to add product to cart: ${error.message}`, 'error');
      }
    });

  });
</script>


{% schema %}
{
  "name": "Image Grid",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "TISSO VISON IN THE WILD"
    },
    {
      "type": "image_picker",
      "id": "image_1",
      "label": "Image 1 (Top Left)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_1",
      "label": "Overlay Image 1 (Optional)"
    },
    {
      "type": "product",
      "id": "product_1",
      "label": "Link Product 1"
    },
    {
      "type": "image_picker",
      "id": "image_2",
      "label": "Image 2 (Top Middle)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_2",
      "label": "Overlay Image 2 (Optional)"
    },
    {
      "type": "product",
      "id": "product_2",
      "label": "Link Product 2"
    },
    {
      "type": "image_picker",
      "id": "image_3",
      "label": "Image 3 (Top Right)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_3",
      "label": "Overlay Image 3 (Optional)"
    },
    {
      "type": "product",
      "id": "product_3",
      "label": "Link Product 3"
    },
    {
      "type": "image_picker",
      "id": "image_4",
      "label": "Image 4 (Bottom Left)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_4",
      "label": "Overlay Image 4 (Optional)"
    },
    {
      "type": "product",
      "id": "product_4",
      "label": "Link Product 4"
    },
    {
      "type": "image_picker",
      "id": "image_5",
      "label": "Image 5"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_5",
      "label": "Overlay Image 5 (Optional)"
    },
    {
      "type": "product",
      "id": "product_5",
      "label": "Link Product 5"
    },
    {
      "type": "image_picker",
      "id": "image_6",
      "label": "Image 6 (Bottom Right)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_6",
      "label": "Overlay Image 6 (Optional)"
    },
    {
      "type": "product",
      "id": "product_6",
      "label": "Link Product 6"
    }
  ],
  "presets": [
    {
      "name": "Image Grid Section",
      "category": "Image",
      "settings": {
        "title": "TISSO VISON IN THE WILD"
      }
    }
  ]
}
{% endschema %}
