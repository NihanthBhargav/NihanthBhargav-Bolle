<div class="image-grid-section">
  <div class="page-width">
    <div class="grid-header">
      <h2 class="grid-title">{{ section.settings.title }}</h2>
    </div>

    <div class="image-grid-container">
      <div class="grid-item">
        {{ section.settings.image_1 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% if section.settings.overlay_image_1 != blank %}
          <div class="overlay-button"
            data-product-handle="{{ section.settings.product_1 }}"
            data-grid-image-url="{{ section.settings.image_1 | image_url: width: 400 }}">
            {{ section.settings.overlay_image_1 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-1', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      <div class="grid-item">
        {{ section.settings.image_2 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% if section.settings.overlay_image_2 != blank %}
          <div class="overlay-button"
            data-product-handle="{{ section.settings.product_2 }}"
            data-grid-image-url="{{ section.settings.image_2 | image_url: width: 400 }}">
            {{ section.settings.overlay_image_2 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-2', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      <div class="grid-item">
        {{ section.settings.image_3 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% if section.settings.overlay_image_3 != blank %}
          <div class="overlay-button"
            data-product-handle="{{ section.settings.product_3 }}"
            data-grid-image-url="{{ section.settings.image_3 | image_url: width: 400 }}">
            {{ section.settings.overlay_image_3 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-3', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      <div class="grid-item">
        {{ section.settings.image_4 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% if section.settings.overlay_image_4 != blank %}
          <div class="overlay-button"
            data-product-handle="{{ section.settings.product_4 }}"
            data-grid-image-url="{{ section.settings.image_4 | image_url: width: 400 }}">
            {{ section.settings.overlay_image_4 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-4', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      <div class="grid-item">
        {{ section.settings.image_5 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% if section.settings.overlay_image_5 != blank %}
          <div class="overlay-button"
            data-product-handle="{{ section.settings.product_5 }}"
            data-grid-image-url="{{ section.settings.image_5 | image_url: width: 400 }}">
            {{ section.settings.overlay_image_5 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-5', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      <div class="grid-item">
        {{ section.settings.image_6 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% if section.settings.overlay_image_6 != blank %}
          <div class="overlay-button"
            data-product-handle="{{ section.settings.product_6 }}"
            data-grid-image-url="{{ section.settings.image_6 | image_url: width: 400 }}">
            {{ section.settings.overlay_image_6 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-6', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>

{% comment %} Product Quick View Modal HTML {% endcomment %}
<div id="product-quick-view-modal" class="product-quick-view-modal" style="display: none;">
  <div class="modal-overlay"></div>
  <div class="modal-content">
    <button class="modal-close-button">&times;</button>
    <div class="modal-elements-container">
        <div class="modal-single-image">
            <img id="modal-main-product-image" src="" alt="Product Image" width="120" height="140">
        </div>

        <h3 class="modal-product-title"></h3>
        <p class="modal-product-price"></p>
        <div class="modal-product-description"></div>

        {# ADDED SIZE CHART BUTTON HERE #}
        <button class="modal-size-chart-button">Size Chart</button>

        <div class="modal-variant-options">
        </div>

        <div class="modal-add-to-cart-form">
          <button class="modal-add-to-cart-button">ADD TO CART â†’</button>
        </div>
    </div>
  </div>
</div>

{% comment %} Dedicated Size Chart Modal HTML (now contains user's exact dropdown code) {% endcomment %}
<div id="size-chart-modal" class="size-chart-modal" style="display: none;">
  <div class="modal-overlay"></div>
  <div class="modal-content size-chart-content">
    <button class="modal-close-button">&times;</button>
    <h3 class="size-chart-title">Product Size Selection</h3>
    {# User's provided size chart HTML #}
    <label for="size">Size</label>
    <div class="dropdown" id="size-chart-specific-dropdown"> {# Added unique ID for this instance #}
      <div class="dropdown-header">
        <span id="size-chart-selected">Choose your size</span>
        <div class="line"></div>
        <i class="arrow" id="size-chart-arrow"></i>
      </div>
      <div class="dropdown-list" id="size-chart-dropdown-list">
        <div>XS</div>
        <div>S</div>
        <div>M</div>
        <div>L</div>
        <div>XL</div>
      </div>
    </div>
    {# User's provided size chart JavaScript, adapted for this specific instance #}
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const dropdown = document.getElementById("size-chart-specific-dropdown");
        const arrow = document.getElementById("size-chart-arrow");
        const list = document.getElementById("size-chart-dropdown-list");
        const selected = document.getElementById("size-chart-selected");

        if (dropdown && arrow && list && selected) {
          dropdown.addEventListener("click", () => {
            list.style.display = list.style.display === "block" ? "none" : "block";
            arrow.classList.toggle("up");
          });

          document.querySelectorAll("#size-chart-dropdown-list div").forEach(item => {
            item.addEventListener("click", (e) => {
              selected.innerText = item.innerText;
              list.style.display = "none";
              arrow.classList.remove("up");
            });
          });

          window.addEventListener("click", (e) => {
            if (!dropdown.contains(e.target)) {
              list.style.display = "none";
              arrow.classList.remove("up");
            }
          });
        }
      });
    </script>
  </div>
</div>


<style>
  /* Base font for the theme */
  body {
    font-family: 'Jost', sans-serif;
  }

  .image-grid-section {
    padding: 50px 0;
    background-color: white;
  }

  .page-width {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 50px;
    box-sizing: border-box;
  }

  .grid-header {
    margin-bottom: 40px;
    text-align: left;
  }

  .grid-title {
    width: 372px;
    height: 43px;
    font-family: 'Lustria', serif;
    font-weight: 400;
    font-size: 36px;
    line-height: 120%;
    letter-spacing: 0px;
    color: black;
    margin: 0;
  }

  .image-grid-container {
    display: grid;
    grid-template-columns: repeat(3, minmax(250px, 433px));
    gap: 20px;
    justify-content: center;
    align-items: center;
  }

  .grid-item {
    position: relative;
    overflow: hidden;
    background-color: #f0f0f0;
    display: flex;
    justify-content: center;
    align-items: center;
    aspect-ratio: 433 / 444;
    opacity: 1;
  }

  .grid-image {
    width: 100%;
    height: 100%;
    display: block;
    object-fit: cover;
  }

  .placeholder-image {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .placeholder-svg {
    max-width: 50%;
    max-height: 50%;
    opacity: 0.5;
  }

  /* Overlay button wrapper (for click event) */
  .overlay-button {
    position: absolute;
    width: 100%;
    height: 100%;
    cursor: pointer;
    z-index: 10;
  }

  /* Hover effect for the overlay button, targeting the image inside it */
  .overlay-button:hover .grid-overlay-image {
    transform: translate(-50%, -50%) scale(1.1);
    transition: transform 0.2s ease-in-out;
  }

  /* General styles for all overlay images */
  .grid-overlay-image {
    position: absolute;
    z-index: 9;
    pointer-events: none;
    background: white;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 1;
    width: 22px;
    height: 22px;
    transform: translate(-50%, -50%);
    transition: transform 0.2s ease-in-out;
  }

  /* Specific styles for each overlay image - **THESE ARE PIXEL-BASED AND WILL LIKELY CAUSE NON-RESPONSIVE BEHAVIOR.**
     They are kept as per your request for initial 'perfect shape' on larger screens.
     You will need to manually adjust these (e.g., to percentages) in media queries for responsiveness.
  */
  .grid-overlay-image-1 {
    top: 238px;
    left: 256.5px;
  }

  .grid-overlay-image-2 {
    top: 222px;
    left: 355.2px;
  }

  .grid-overlay-image-3 {
    top: 82px;
    left: 261px;
  }

  .grid-overlay-image-4 {
    top: 71px;
    left: 301.5px;
  }

  .grid-overlay-image-5 {
    top: 104px;
    left: 212.5px;
  }

  .grid-overlay-image-6 {
    top: 164px;
    left: 319.5px;
  }


  /* Responsive Design */
  @media screen and (max-width: 1400px) {
    .page-width {
      padding: 0 30px;
    }
    .image-grid-container {
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 15px;
    }
    .grid-item {
      width: auto;
      height: auto;
      aspect-ratio: 433 / 444;
    }
    /* WARNING: Fixed pixel positioning of overlays will be problematic here.
       They will not scale/move proportionally with the images.
       You will need to re-evaluate their positioning to use percentages here
       if you want them responsive.
    */
    .grid-overlay-image { /* Generic responsive adjustments if needed */
      width: 5%;
      height: auto;
      top: 15%;
      right: 15%;
      left: auto;
      transform: translate(0,0);
    }
  }

  @media screen and (max-width: 768px) {
    .page-width {
      padding: 0 20px;
    }
    .grid-title {
      width: auto;
      height: auto;
      font-size: 28px;
      text-align: center;
      margin: 0 auto 30px auto;
    }
    .grid-header {
      padding: 0 20px;
    }
    .image-grid-container {
      grid-template-columns: 1fr;
      gap: 10px;
    }
    .grid-overlay-image {
      width: 20px;
      height: 20px;
    }

    /* Modal Responsive Styling Adjustments - Re-enable flexible layout for mobile */
    .modal-content {
      width: 90%;
      height: auto;
      padding: 15px;
      flex-direction: column;
      align-items: flex-start;
    }

    .modal-elements-container {
        position: static;
        width: 100%;
        height: auto;
        overflow-y: visible;
        padding: 0;
    }

    /* Single image adjustments for mobile */
    .modal-single-image {
        position: static;
        width: 100%;
        height: auto;
        margin-bottom: 15px;
        aspect-ratio: 120 / 140;
    }
    .modal-single-image img {
      position: static;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .modal-product-title,
    .modal-product-price,
    .modal-product-description,
    .modal-variant-options,
    .modal-add-to-cart-form {
        position: static;
        width: 100%;
        height: auto;
        margin-left: 0;
        margin-top: 0;
        padding: 0;
    }

    .modal-product-title {
        font-size: 1.5em;
    }
    .modal-product-price {
        font-size: 1.2em;
    }
    .modal-product-description {
        font-size: 0.9em;
    }
    .modal-size-chart-button { /* Responsive for button */
      position: static;
      width: 100%;
      margin-bottom: 15px;
    }

    .modal-add-to-cart-form {
      flex-direction: column;
      width: 100%;
    }
    .modal-add-to-cart-button {
      width: 100%;
    }

    .variant-option-group {
      margin-bottom: 10px;
    }
    .variant-option-group label {
      margin-bottom: 5px;
    }

    /* Size Chart Modal Responsive */
    .size-chart-modal .modal-content {
      width: 95%;
      height: auto;
      max-height: 90vh;
      overflow-y: auto;
      padding: 20px;
    }
  }

  /* Styles for Product Quick View Modal */
  .product-quick-view-modal, .size-chart-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
  }

  .modal-content {
    background-color: white;
    padding: 0;
    border-radius: 0;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    position: relative;
    z-index: 1001;
    width: 311px;
    height: 447px;
    transform: rotate(0deg);
    opacity: 1;
    animation: fadeIn 0s ease-out;
    overflow: hidden;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .modal-close-button {
    position: absolute;
    top: 15px;
    right: 15px;
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #333;
    z-index: 1003;
  }

  .modal-elements-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  /* --- Single Image Styles --- */
  .modal-single-image {
    position: absolute;
    width: 120px;
    height: 140px;
    top: 36px;
    left: 17px;
    overflow: hidden;
    border-radius: 0;
  }

  .modal-single-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 0;
  }

  /* TEXT CONTEXTS - ABSOLUTELY POSITIONED */
  .modal-product-title {
    position: absolute;
    width: 136px;
    height: 19px;
    top: 49px;
    left: 145px;
    font-family: 'Jost', sans-serif;
    font-weight: 300;
    font-size: 16px;
    line-height: 120%;
    letter-spacing: 0px;
    text-align: left;
    color: black;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    z-index: 2;
  }

  .modal-product-price {
    position: absolute;
    width: 64px;
    height: 19px;
    top: 88px;
    left: 145px;
    font-family: 'Lustria', serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 120%;
    letter-spacing: 0px;
    background: #000000;
    color: #FFFFFF; /* Ensures text is visible on black background */
    text-align: left;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    z-index: 2;
  }

  .modal-product-description {
    position: absolute;
    width: 146px;
    height: 60px;
    top: 119px;
    left: 145px;
    font-family: 'Jost', sans-serif;
    font-weight: 300;
    font-size: 14px;
    line-height: 110%; /* Updated line-height */
    letter-spacing: -1%; /* Updated letter-spacing */
    text-align: left;
    color: #666;
    overflow-y: hidden;
    z-index: 2;
  }

  /* Size Chart Button */
  .modal-size-chart-button {
    position: absolute;
    width: 100px;
    height: 25px;
    top: 185px;
    left: 145px;
    background-color: #f0f0f0;
    color: #333;
    border: 1px solid #ccc;
    border-radius: 0;
    font-family: 'Jost', sans-serif;
    font-size: 12px;
    font-weight: 400;
    cursor: pointer;
    transition: background-color 0.2s ease, color 0.2s ease;
    z-index: 2;
  }

  .modal-size-chart-button:hover {
    background-color: #e0e0e0;
    color: #000;
  }

  .modal-variant-options {
    position: absolute;
    top: 220px;
    left: 17px;
    width: calc(100% - 34px);
    height: 130px;
    overflow-y: hidden;
    display: block;
    z-index: 2;
  }

  .variant-option-group {
    margin-bottom: 10px;
    width: 100%;
    height: auto;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
  }

  .variant-option-group label {
    display: block;
    font-weight: bold;
    margin-bottom: 5px;
    font-size: 0.8em;
    color: #333;
  }

  /* YOUR EXACT CUSTOM SIZE DROPDOWN STYLES */
  .dropdown {
    position: relative;
    width: 250px;
    border: 1px solid #ccc;
    cursor: pointer;
    font-family: 'Jost', sans-serif;
  }

  .dropdown-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 40px;
  }

  .dropdown-header span {
    font-size: 16px;
    flex: 1;
    padding: 0 10px;
    line-height: 40px;
  }

  /* Vertical line separator */
  .line {
    border-left: 0.5px solid #000;
    height: 100%;
  }

  .arrow {
    border: solid black;
    border-width: 0 2px 2px 0;
    display: inline-block;
    padding: 4px;
    margin: 0 10px;
    transform: rotate(45deg);
    transition: transform 300ms ease-out; /* smooth arrow rotation */
  }

  .arrow.up {
    transform: rotate(-135deg);
  }

  .dropdown-list {
    display: none;
    position: absolute;
    width: 100%;
    background: #fff;
    z-index: 100;
    border: 1px solid #ccc;
    border-top: none;
    font-family: 'Jost', sans-serif;
  }

  .dropdown-list div {
    padding: 12px;
    text-align: center;
    cursor: pointer;
    border-top: 1px solid #ccc;
    transition: all 300ms ease-out; /* ðŸ‘ˆ smooth hover animation */
  }

  .dropdown-list div:last-child {
    border-bottom: 1px solid #ccc;
  }

  /* Hover effect */
  .dropdown-list div:hover {
    background: #000;
    color: #fff;
  }
  /* END OF YOUR EXACT CUSTOM SIZE DROPDOWN STYLES */


  .modal-add-to-cart-form {
    position: absolute;
    top: 330px;
    left: 17px;
    width: calc(100% - 34px);
    display: flex;
    gap: 10px;
    align-items: center;
    flex-wrap: wrap;
    z-index: 2;
  }

  .modal-add-to-cart-button {
    background-color: black;
    color: white;
    padding: 10px 18px;
    border: none;
    border-radius: 0;
    cursor: pointer;
    font-size: 1em;
    font-weight: bold;
    transition: background-color 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
    flex-grow: 1;
    width: 100%;
  }

  .modal-add-to-cart-button:hover {
    background-color: #333;
  }

  /* --- CUSTOM COLOR SELECTOR STYLES --- */
  fieldset.color-container {
    border: none;
    padding: 0;
    margin: 0;
    min-width: 0;
    width: 100%;
  }

  fieldset.color-container legend {
    font-size: 14px;
    font-weight: 400;
    margin-bottom: 5px;
    padding: 0;
  }

  /* Outer container */
  .color-box {
    position: relative;
    display: flex;
    width: 271px;
    height: 40.4413px;
    border: 0.5px solid #000;
    box-sizing: border-box;
    overflow: hidden;
  }

  /* Sliding background */
  .color-box .slider {
    position: absolute;
    top: 0;
    left: 0;
    width: 50%;
    height: 100%;
    background: #000;
    transition: transform 0.4s ease;
    z-index: 1;
    display: none;
  }

  .color-box .slider.right {
    transform: translateX(100%);
  }

  /* Each option */
  .color-option {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 18px;
    text-transform: capitalize;
    position: relative;
    cursor: pointer;
    z-index: 2;
    color: #000;
  }

  /* Swatch styles */
  .color-swatch {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    border-right: 0.5px solid #000;
    pointer-events: none;
    z-index: 3;
  }

  .white-swatch {
    width: 5.8071px;
    background: #fff;
  }

  .black-swatch {
    width: 4.8392px;
    background: #000;
  }

  /* Active state */
  .color-option.active {
    color: #fff !important;
  }

  /* Size Chart Modal Specific Styles */
  .size-chart-modal .modal-content {
    /* Retaining previous dimensions as requested */
    width: 311px;
    height: 447px;
    transform: rotate(0deg);
    opacity: 1;

    max-height: 90vh; /* Max height to prevent overflow on small screens */
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    overflow-y: auto; /* Enable scrolling if content is too tall */
    background-color: white; /* Ensure background is white for visibility */
    border-radius: 0;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    position: relative;
    z-index: 1001;
  }

  .size-chart-title {
    font-family: 'Lustria', serif;
    font-size: 24px;
    margin-bottom: 20px;
    color: black;
    text-align: center;
  }
</style>

<script>
  // Reusable function to initialize a dropdown instance based on user's code structure
  function initializeUserDropdown(dropdownElement, shouldUpdateVariants = true) {
    const arrow = dropdownElement.querySelector(".arrow");
    const list = dropdownElement.querySelector(".dropdown-list");
    const selected = dropdownElement.querySelector(".selected");

    const dropdownClickHandler = (e) => {
      e.stopPropagation();
      list.style.display = list.style.display === "block" ? "none" : "block";
      arrow.classList.toggle("up");
    };

    const listItemClickHandler = (e) => {
      e.stopPropagation();
      selected.innerText = e.target.innerText;
      list.style.display = "none";
      arrow.classList.remove("up");
      if (shouldUpdateVariants && typeof updateVariantInfo === 'function') {
        updateVariantInfo(); // Only call if in variant selection context
      }
    };

    const globalClickHandler = (e) => {
      if (!dropdownElement.contains(e.target) && list.style.display === "block") {
        list.style.display = "none";
        arrow.classList.remove("up");
      }
    };

    dropdownElement.addEventListener("click", dropdownClickHandler);
    list.querySelectorAll("div").forEach(item => {
      item.addEventListener("click", listItemClickHandler);
    });

    // Store listener references to remove them later, important for dynamic elements
    dropdownElement._dropdownClickHandler = dropdownClickHandler;
    dropdownElement._listItemClickHandler = listItemClickHandler;
    dropdownElement._globalClickHandler = globalClickHandler;
    document.addEventListener("click", globalClickHandler);
  }


  document.addEventListener('DOMContentLoaded', () => {
    const quickViewModal = document.getElementById('product-quick-view-modal');
    const modalCloseButton = quickViewModal.querySelector('.modal-close-button');
    const modalOverlay = quickViewModal.querySelector('.modal-overlay');
    const modalProductTitle = quickViewModal.querySelector('.modal-product-title');
    const modalProductPrice = quickViewModal.querySelector('.modal-product-price');
    const modalProductDescription = quickViewModal.querySelector('.modal-product-description');
    const modalVariantOptions = quickViewModal.querySelector('.modal-variant-options');
    const modalAddToCartButton = quickViewModal.querySelector('.modal-add-to-cart-button');
    const modalMainProductImage = quickViewModal.querySelector('#modal-main-product-image');

    // Size Chart elements
    const sizeChartButton = quickViewModal.querySelector('.modal-size-chart-button');
    const sizeChartModal = document.getElementById('size-chart-modal');
    const sizeChartCloseButton = sizeChartModal.querySelector('.modal-close-button');
    const sizeChartOverlay = sizeChartModal.querySelector('.modal-overlay');

    let currentProductData = null;

    // Helper to format money
    const formatMoney = (cents) => {
      const numericCents = parseFloat(cents) || 0;

      if (typeof Shopify === 'undefined' || !Shopify.currency) {
        return `$${(numericCents / 100).toFixed(2)}`;
      }
      return new Intl.NumberFormat(Shopify.currency.active, {
          style: 'currency',
          currency: Shopify.currency.active || 'EUR'
      }).format(numericCents / 100);
    };

    // Function to update modal content based on selected variant
    window.updateVariantInfo = () => { // Made global to be accessible by dropdowns
      if (!currentProductData) return;

      const selectedOptions = {};
      let allOptionsSelected = true;

      modalVariantOptions.querySelectorAll('.variant-option-group').forEach(group => {
        const optionName = group.dataset.optionName;

        if (optionName.toLowerCase() === 'size') {
            // For the size dropdown using user's code structure
            const dropdownSelectedSpan = group.querySelector('.dropdown-header .selected');
            if (dropdownSelectedSpan) {
                const selectedText = dropdownSelectedSpan.textContent;
                if (selectedText && selectedText !== "Choose your size") {
                    selectedOptions[optionName] = selectedText;
                } else {
                    allOptionsSelected = false;
                }
            } else {
                allOptionsSelected = false;
            }
        } else if (optionName.toLowerCase() === 'color') {
            const activeColorOption = group.querySelector('.color-option.active');
            if (activeColorOption) {
                selectedOptions[optionName] = activeColorOption.dataset.value;
            } else {
                allOptionsSelected = false;
            }
        } else {
            // For other variants, use the pill selection
            const selectedPill = group.querySelector('.variant-option-value-pill.selected');
            if (selectedPill) {
                selectedOptions[optionName] = selectedPill.dataset.value;
            } else {
                allOptionsSelected = false;
            }
        }
      });

      let selectedVariant = null;
      if (allOptionsSelected) {
          selectedVariant = currentProductData.variants.find(variant => {
            return Object.keys(selectedOptions).every(optionName => {
              const optionIndex = currentProductData.options.findIndex(opt => opt.name === optionName);
              if (optionIndex === -1) return false;
              return variant.options[optionIndex] === selectedOptions[optionName];
            });
          });
      }

      if (selectedVariant) {
        modalProductPrice.textContent = formatMoney(selectedVariant.price);
        modalAddToCartButton.dataset.variantId = selectedVariant.id;
        modalAddToCartButton.disabled = selectedVariant.available ? false : true;
        modalAddToCartButton.textContent = selectedVariant.available ? 'ADD TO CART â†’' : 'SOLD OUT';

        if (selectedVariant.featured_image && selectedVariant.featured_image.src) {
            modalMainProductImage.src = selectedVariant.featured_image.src;
            modalMainProductImage.alt = selectedVariant.featured_image.alt || currentProductData.title;
        } else if (currentProductData.images && currentProductData.images.length > 0) {
            modalMainProductImage.src = currentProductData.images[0].src;
            modalMainProductImage.alt = currentProductData.images[0].alt || currentProductData.title;
        } else {
            modalMainProductImage.src = 'https://placehold.co/400x400/cccccc/ffffff?text=No+Image';
            modalMainProductImage.alt = 'No image available';
        }

      } else {
        modalProductPrice.textContent = formatMoney(currentProductData.price || 0);
        modalAddToCartButton.dataset.variantId = '';
        modalAddToCartButton.disabled = true;
        modalAddToCartButton.textContent = 'SELECT OPTIONS';
      }
    };

    // Function to generate variant selectors
    const generateVariantSelectors = (productData) => {
      modalVariantOptions.innerHTML = '';
      productData.options.forEach((option, optionIndex) => {
        const optionGroup = document.createElement('div');
        optionGroup.classList.add('variant-option-group');
        optionGroup.dataset.optionName = option.name;

        const label = document.createElement('label');
        label.textContent = option.name;
        optionGroup.appendChild(label);

        if (option.name.toLowerCase() === 'size') {
            // Constructing user's provided dropdown HTML for size selection
            const dropdownContainer = document.createElement('div');
            dropdownContainer.classList.add('dropdown');

            const dropdownHeader = document.createElement('div');
            dropdownHeader.classList.add('dropdown-header');
            dropdownContainer.appendChild(dropdownHeader);

            const selectedSpan = document.createElement('span');
            selectedSpan.classList.add('selected'); // Using user's class name
            selectedSpan.textContent = "Choose your size";
            dropdownHeader.appendChild(selectedSpan);

            const lineDiv = document.createElement('div');
            lineDiv.classList.add('line'); // Using user's class name
            dropdownHeader.appendChild(lineDiv);

            const arrowI = document.createElement('i');
            arrowI.classList.add('arrow'); // Using user's class name
            dropdownHeader.appendChild(arrowI);

            const dropdownList = document.createElement('div');
            dropdownList.classList.add('dropdown-list'); // Using user's class name
            dropdownContainer.appendChild(dropdownList);

            option.values.forEach(value => {
              const listItem = document.createElement('div');
              listItem.textContent = value;
              listItem.dataset.value = value;
              dropdownList.appendChild(listItem);
            });

            optionGroup.appendChild(dropdownContainer);
            modalVariantOptions.appendChild(optionGroup);

            // Initialize this dropdown instance with the reusable function
            initializeUserDropdown(dropdownContainer, true); // Pass true to update variants
            
        } else if (option.name.toLowerCase() === 'color') {
            const fieldset = document.createElement('fieldset');
            fieldset.classList.add('color-container');

            const legend = document.createElement('legend');
            legend.textContent = option.name;
            fieldset.appendChild(legend);

            const colorBox = document.createElement('div');
            colorBox.classList.add('color-box');
            fieldset.appendChild(colorBox);

            const slider = document.createElement('div');
            slider.classList.add('slider');
            colorBox.appendChild(slider);

            const whiteValue = option.values.find(v => v.toLowerCase() === 'white');
            const blackValue = option.values.find(v => v.toLowerCase() === 'black');

            if (whiteValue) {
                const whiteOption = document.createElement('div');
                whiteOption.classList.add('color-option');
                whiteOption.dataset.value = whiteValue;
                whiteOption.innerHTML = `<span class="color-swatch white-swatch"></span> ${whiteValue}`;
                colorBox.appendChild(whiteOption);
            }

            if (blackValue) {
                const blackOption = document.createElement('div');
                blackOption.classList.add('color-option');
                blackOption.dataset.value = blackValue;
                blackOption.innerHTML = `<span class="color-swatch black-swatch"></span> ${blackValue}`;
                colorBox.appendChild(blackOption);
            }

            optionGroup.appendChild(fieldset);
            modalVariantOptions.appendChild(optionGroup);

            const whiteBox = optionGroup.querySelector(".color-option[data-value='White']");
            const blackBox = optionGroup.querySelector(".color-option[data-value='Black']");
            const colorSlider = optionGroup.querySelector(".color-box .slider");

            // Auto-select the first color if available
            if (whiteBox) {
                whiteBox.click();
            } else if (blackBox) {
                blackBox.click();
            }

            if (whiteBox) {
                whiteBox.addEventListener("click", () => {
                    if (colorSlider) {
                        colorSlider.style.display = "block";
                        colorSlider.classList.remove("right");
                    }
                    whiteBox.classList.add("active");
                    if (blackBox) blackBox.classList.remove("active");
                    updateVariantInfo();
                });
            }

            if (blackBox) {
                blackBox.addEventListener("click", () => {
                    if (colorSlider) {
                        colorSlider.style.display = "block";
                        colorSlider.classList.add("right");
                    }
                    blackBox.classList.add("active");
                    if (whiteBox) whiteBox.classList.remove("active");
                    updateVariantInfo();
                });
            }
        } else {
          // For other variants, use the pill selection
          const valuesContainer = document.createElement('div');
          valuesContainer.classList.add('variant-option-values');

          option.values.forEach(value => {
            const pill = document.createElement('span');
            pill.classList.add('variant-option-value-pill');
            pill.textContent = value;
            pill.dataset.value = value;
            valuesContainer.appendChild(pill);

            pill.addEventListener('click', () => {
              valuesContainer.querySelectorAll('.variant-option-value-pill').forEach(p => p.classList.remove('selected'));
              pill.classList.add('selected');
              updateVariantInfo();
            });
          });
          optionGroup.appendChild(valuesContainer);
          modalVariantOptions.appendChild(optionGroup);

            const firstPill = valuesContainer.querySelector('.variant-option-value-pill');
            if (firstPill) {
                firstPill.classList.add('selected');
            }
        }
      });

      updateVariantInfo();
    };


    // Function to open the modal
    const openModal = async (productHandle, gridImageUrl) => {
      try {
        console.log('Opening modal for product handle:', productHandle);
        console.log('Grid image URL provided:', gridImageUrl);

        const response = await fetch(`/products/${productHandle}.js`);
        if (!response.ok) {
          let errorMessage = `HTTP error! status: ${response.status}`;
          try {
            const errorBody = await response.json();
            if (errorBody && errorBody.message) {
              errorMessage += ` - ${errorBody.message}`;
            }
          } catch (e) {
            console.error('Error parsing error response:', e);
          }
          throw new Error(errorMessage);
        }
        currentProductData = await response.json();
        console.log('Fetched product data:', currentProductData);

        if (gridImageUrl) {
            modalMainProductImage.src = gridImageUrl;
            modalMainProductImage.alt = currentProductData.title;
        } else if (currentProductData.images && currentProductData.images.length > 0) {
            modalMainProductImage.src = currentProductData.images[0].src;
            modalMainProductImage.alt = currentProductData.images[0].alt || currentProductData.title;
        } else {
            modalMainProductImage.src = 'https://placehold.co/400x400/cccccc/ffffff?text=No+Image';
            modalMainProductImage.alt = 'No image available';
        }

        modalProductTitle.textContent = currentProductData.title;
        modalProductPrice.textContent = formatMoney(currentProductData.price);
        modalProductDescription.innerHTML = currentProductData.description;

        generateVariantSelectors(currentProductData);

        quickViewModal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
      } catch (error) {
        console.error('Error fetching product data:', error);
        alert(`Could not load product details. Please check the product handle and network connection, or if the product exists. Error: ${error.message}`);
        quickViewModal.style.display = 'none';
      }
    };

    // Function to close the modal
    const closeModal = () => {
      quickViewModal.style.display = 'none';
      document.body.style.overflow = '';
      modalMainProductImage.src = '';
      modalMainProductImage.alt = '';
      modalProductTitle.textContent = '';
      modalProductPrice.textContent = '';
      modalProductDescription.innerHTML = '';
      modalVariantOptions.innerHTML = '';
      modalAddToCartButton.dataset.variantId = '';
      modalAddToCartButton.disabled = false;
      modalAddToCartButton.textContent = 'ADD TO CART â†’';
      currentProductData = null;

      // Clean up global click listeners from custom dropdowns in quick view
      modalVariantOptions.querySelectorAll('.dropdown').forEach(dropdownElement => {
        if (dropdownElement._globalClickHandler) {
          document.removeEventListener("click", dropdownElement._globalClickHandler);
          delete dropdownElement._globalClickHandler;
          dropdownElement.removeEventListener("click", dropdownElement._dropdownClickHandler);
          dropdownElement.querySelector('.dropdown-list').querySelectorAll("div").forEach(item => {
              item.removeEventListener("click", dropdownElement._listItemClickHandler);
          });
        }
      });
    };

    // Function to open size chart modal
    const openSizeChartModal = () => {
      sizeChartModal.style.display = 'flex';
      document.body.style.overflow = 'hidden';
    };

    // Function to close size chart modal
    const closeSizeChartModal = () => {
      sizeChartModal.style.display = 'none';
      // Only unlock body scroll if no other modals are open
      if (quickViewModal.style.display === 'none') {
        document.body.style.overflow = '';
      }
    };


    // Event listeners for opening modal (all overlays)
    document.querySelectorAll('.overlay-button').forEach(button => {
      button.addEventListener('click', (event) => {
        event.preventDefault();
        const productHandle = button.dataset.productHandle;
        const gridImageUrl = button.dataset.gridImageUrl;
        if (productHandle) {
          openModal(productHandle, gridImageUrl);
        } else {
          console.warn('Overlay button clicked but no product handle found.');
          alert('No product linked to this overlay.');
        }
      });
    });

    // Event listeners for closing quick view modal
    modalCloseButton.addEventListener('click', closeModal);
    modalOverlay.addEventListener('click', closeModal);

    // Event listeners for size chart modal
    sizeChartButton.addEventListener('click', openSizeChartModal);
    sizeChartCloseButton.addEventListener('click', closeSizeChartModal);
    sizeChartOverlay.addEventListener('click', closeSizeChartModal);


    // Add to Cart functionality
    modalAddToCartButton.addEventListener('click', async () => {
      const variantId = modalAddToCartButton.dataset.variantId;
      const quantity = 1;

      if (!variantId) {
        console.error('Invalid variant ID.');
        alert('Please select all required options.');
        return;
      }

      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            items: [
              {
                id: variantId,
                quantity: quantity
              }
            ]
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(`Add to cart failed: ${errorData.message || 'Unknown error'}`);
        }

        const cartData = await response.json();
        console.log('Product added to cart:', cartData);
        closeModal();
        alert('Product added to cart successfully!');

      } catch (error) {
        console.error('Error adding to cart:', error);
        alert('Failed to add product to cart. Please try again.');
      }
    });

    // Simple custom alert for demonstration (replace with a proper modal in production)
    function alert(message) {
      const existingAlert = document.getElementById('custom-alert');
      if (existingAlert) {
        existingAlert.remove();
      }

      const alertDiv = document.createElement('div');
      alertDiv.id = 'custom-alert';
      alertDiv.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #f44336;
        color: white;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        z-index: 10000;
        font-family: 'Jost', sans-serif;
        font-size: 16px;
        display: flex;
        align-items: center;
        gap: 10px;
        animation: slideIn 0.5s forwards, fadeOut 3s forwards 2s;
      `;
      alertDiv.innerHTML = `
        <span>${message}</span>
        <button style="background: none; border: none; color: white; font-size: 20px; cursor: pointer;">&times;</button>
      `;

      document.body.appendChild(alertDiv);

      alertDiv.querySelector('button').addEventListener('click', () => {
        alertDiv.remove();
      });

      const styleSheet = document.createElement("style");
      styleSheet.type = "text/css";
      styleSheet.innerText = `
        @keyframes slideIn {
          from { top: -50px; opacity: 0; }
          to { top: 20px; opacity: 1; }
        }
        @keyframes fadeOut {
          from { opacity: 1; }
          to { opacity: 0; }
        }
      `;
      document.head.appendChild(styleSheet);

      setTimeout(() => {
        if (document.body.contains(alertDiv)) {
          alertDiv.remove();
        }
        if (document.head.contains(styleSheet)) {
            styleSheet.remove();
        }
      }, 5000);
    }

  });
</script>

{% schema %}
{
  "name": "Image Grid",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "TISSO VISON IN THE WILD"
    },
    {
      "type": "image_picker",
      "id": "image_1",
      "label": "Image 1 (Top Left)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_1",
      "label": "Overlay Image 1 (Optional)"
    },
    {
      "type": "product",
      "id": "product_1",
      "label": "Link Product 1"
    },
    {
      "type": "image_picker",
      "id": "image_2",
      "label": "Image 2 (Top Middle)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_2",
      "label": "Overlay Image 2 (Optional)"
    },
    {
      "type": "product",
      "id": "product_2",
      "label": "Link Product 2"
    },
    {
      "type": "image_picker",
      "id": "image_3",
      "label": "Image 3 (Top Right)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_3",
      "label": "Overlay Image 3 (Optional)"
    },
    {
      "type": "product",
      "id": "product_3",
      "label": "Link Product 3"
    },
    {
      "type": "image_picker",
      "id": "image_4",
      "label": "Image 4 (Bottom Left)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_4",
      "label": "Overlay Image 4 (Optional)"
    },
    {
      "type": "product",
      "id": "product_4",
      "label": "Link Product 4"
    },
    {
      "type": "image_picker",
      "id": "image_5",
      "label": "Image 5"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_5",
      "label": "Overlay Image 5 (Optional)"
    },
    {
      "type": "product",
      "id": "product_5",
      "label": "Link Product 5"
    },
    {
      "type": "image_picker",
      "id": "image_6",
      "label": "Image 6 (Bottom Right)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_6",
      "label": "Overlay Image 6 (Optional)"
    },
    {
      "type": "product",
      "id": "product_6",
      "label": "Link Product 6"
    }
  ],
  "presets": [
    {
      "name": "Image Grid Section",
      "category": "Image",
      "settings": {
        "title": "TISSO VISON IN THE WILD"
      }
    }
  ]
}
{% endschema %}
