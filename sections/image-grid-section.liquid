{% comment %}
  This section creates a responsive image grid with optional overlay images and product links.
  It also includes a product quick-view modal with color and size selection dropdowns,
  ensuring the size dropdown overlays other elements when open.
{% endcomment %}

<style>
  /* Base styling for the image grid section */
  .image-grid-section {
    padding: 40px 0;
    font-family: 'Inter', sans-serif;
  }

  /* Page width container for consistent layout */
  .page-width {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  /* Header for the grid section */
  .grid-header {
    text-align: center;
    margin-bottom: 40px;
  }

  /* Title of the grid */
  .grid-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: #333;
  }

  /* Container for the image grid items */
  .image-grid-container {
    display: grid;
    grid-template-columns: repeat(1, 1fr); /* Default to single column on small screens */
    gap: 20px;
  }

  /* Responsive grid for larger screens */
  @media (min-width: 768px) {
    .image-grid-container {
      grid-template-columns: repeat(2, 1fr); /* Two columns on medium screens */
    }
  }

  @media (min-width: 1024px) {
    .image-grid-container {
      grid-template-columns: repeat(3, 1fr); /* Three columns on large screens */
    }
    /* Specific adjustments for first two items to ensure consistent layout */
    .image-grid-container .grid-item:first-child,
    .image-grid-container .grid-item:nth-child(2) {
      grid-column: span 1;
    }
  }

  /* Styling for individual grid items */
  .grid-item {
    position: relative;
    overflow: hidden;
    border-radius: 12px; /* Rounded corners for modern look */
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
  }

  /* Styling for the main image within a grid item */
  .grid-image {
    width: 100%;
    height: 100%; /* Ensure images fill their containers */
    object-fit: cover; /* Cover the area, cropping if necessary */
    display: block;
    transition: transform 0.3s ease; /* Smooth hover effect */
  }

  .grid-item:hover .grid-image {
    transform: scale(1.05); /* Slightly zoom on hover */
  }

  /* Styling for the overlay button (e.g., quick view trigger) */
  .overlay-button {
    position: absolute;
    bottom: 20px;
    right: 20px;
    background-color: rgba(255, 255, 255, 0.9);
    border-radius: 50%; /* Circular button */
    padding: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    transition: transform 0.2s ease;
    z-index: 10; /* Ensure overlay button is above the image */
  }

  .overlay-button:hover {
    transform: scale(1.1); /* Pop on hover */
  }

  /* Styling for the overlay image (e.g., a plus icon within the button) */
  .grid-overlay-image {
    width: 22px;
    height: 22px;
    object-fit: contain;
  }

  /* --- Product Quick View Modal Styling --- */
  .product-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6); /* Dark semi-transparent background */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; /* High z-index to cover everything */
    opacity: 0;
    visibility: hidden; /* Hide initially */
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .product-modal-overlay.active {
    opacity: 1;
    visibility: visible; /* Show when active */
  }

  .product-modal {
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3); /* Stronger shadow for modal */
    padding: 30px;
    width: 90%;
    max-width: 600px; /* Limit modal width */
    position: relative;
    transform: translateY(-20px); /* Initial subtle animation */
    transition: transform 0.3s ease;
  }

  .product-modal-overlay.active .product-modal {
    transform: translateY(0); /* Animate into view */
  }

  .close-modal-button {
    position: absolute;
    top: 15px;
    right: 15px;
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #555;
    transition: color 0.2s ease;
  }

  .close-modal-button:hover {
    color: #000;
  }

  .modal-content-wrapper {
    display: flex;
    flex-direction: column; /* Stack on small screens */
    gap: 20px;
  }

  @media (min-width: 768px) {
    .modal-content-wrapper {
      flex-direction: row; /* Side-by-side on larger screens */
    }
  }

  .modal-image-container {
    flex: 1;
    text-align: center;
  }

  .modal-product-image {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    display: block; /* Remove extra space below image */
    margin: 0 auto; /* Center image if smaller than container */
  }

  .modal-details {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  .modal-product-title {
    font-size: 1.8rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 5px;
  }

  .modal-product-price {
    font-size: 1.5rem;
    color: #007bff; /* Highlight price */
    font-weight: 700;
    margin-bottom: 15px;
  }

  .modal-product-description {
    font-size: 0.95rem;
    color: #666;
    line-height: 1.6;
    margin-bottom: 20px;
  }

  /* Color selector styles */
  .color-selector {
    margin-bottom: 20px;
  }

  .color-label {
    font-weight: 600;
    margin-bottom: 10px;
    display: block;
    color: #333;
  }

  .color-options {
    display: flex;
    flex-wrap: wrap; /* Allow colors to wrap */
    gap: 10px;
  }

  .color-option {
    padding: 10px 20px;
    border: 1px solid #ccc;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.2s ease, border-color 0.2s ease, box-shadow 0.2s ease;
  }

  .color-option.selected {
    background-color: #f0f0f0;
    border-color: #007bff; /* Highlight selected color */
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.5); /* Blue glow */
    font-weight: 600;
  }

  .color-option:hover {
    background-color: #f8f8f8;
  }

  /* Size dropdown styles */
  .size-selector {
    margin-bottom: 30px;
    position: relative; /* **CRUCIAL**: Establishes positioning context for the absolute dropdown list */
    z-index: 20; /* Ensure the size selector itself has a reasonable z-index */
  }

  .size-label {
    font-weight: 600;
    margin-bottom: 10px;
    display: block;
    color: #333;
  }

  .dropdown-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 20px;
    border: 1px solid #ccc;
    border-radius: 8px;
    cursor: pointer;
    background-color: #fff;
    font-family: 'Inter', sans-serif; /* Consistent font */
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
  }

  .dropdown-header:hover {
    border-color: #aaa;
  }

  .dropdown-header.active {
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.5);
    border-bottom-left-radius: 0; /* No rounded corners when dropdown is open */
    border-bottom-right-radius: 0;
  }

  .dropdown-header span {
    font-size: 1rem;
    color: #333;
  }

  .dropdown-header svg {
    transition: transform 0.3s ease;
  }

  .dropdown-header.active svg {
    transform: rotate(180deg); /* Arrow rotates when dropdown is active */
  }

  .dropdown-list {
    display: none; /* Hidden by default */
    position: absolute; /* **CRUCIAL**: Takes the element out of the normal document flow */
    top: 100%; /* **CRUCIAL**: Positions it exactly below the dropdown header */
    left: 0;
    width: 100%; /* Match width of the header */
    background: #fff;
    z-index: 100; /* **CRUCIAL**: Ensures it overlays other elements, including the add to cart button */
    border: 1px solid #ccc;
    border-top: none; /* No double border at the top */
    border-radius: 0 0 8px 8px; /* Rounded bottom corners only */
    font-family: 'Inter', sans-serif;
    max-height: 150px; /* Limit height for scrollability if many options */
    overflow-y: auto;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Add shadow for depth */
  }

  .dropdown-list.active {
    display: block; /* Show when active */
  }

  .dropdown-item {
    padding: 12px 20px;
    cursor: pointer;
    transition: background-color 0.2s ease;
    color: #333;
  }

  .dropdown-item:hover {
    background-color: #f0f0f0;
  }

  .dropdown-item.selected {
    background-color: #e0f0ff; /* Highlight selected size */
    font-weight: 600;
    color: #007bff;
  }

  /* Add to Cart Button styles */
  .add-to-cart-button {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    padding: 15px 30px;
    background-color: #000;
    color: #fff;
    border: none;
    border-radius: 8px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
    width: 100%; /* Full width button */
  }

  .add-to-cart-button:hover {
    background-color: #333;
    transform: translateY(-2px); /* Slight lift on hover */
  }

  .add-to-cart-button svg {
    width: 20px;
    height: 20px;
    fill: currentColor;
  }

  /* Success Message styles */
  .add-to-cart-success {
    background-color: #d4edda;
    color: #155724;
    padding: 10px;
    border-radius: 8px;
    margin-top: 15px;
    text-align: center;
    display: none; /* Hidden by default */
  }
</style>

<div class="image-grid-section">
  <div class="page-width">
    <div class="grid-header">
      <h2 class="grid-title">{{ section.settings.title }}</h2>
    </div>

    <div class="image-grid-container">
      {%- for i in (1..5) -%}
        {%- assign image_setting = 'image_' | append: i -%}
        {%- assign overlay_image_setting = 'overlay_image_' | append: i -%}
        {%- assign product_setting = 'product_' | append: i -%}

        {%- if section.settings[image_setting] != blank -%}
          <div class="grid-item">
            {{ section.settings[image_setting] | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615, loading: 'lazy' }}
            {%- if section.settings[overlay_image_setting] != blank and section.settings[product_setting] != blank -%}
              <div class="overlay-button"
                   data-product-handle="{{ section.settings[product_setting].handle }}"
                   data-grid-image-url="{{ section.settings[image_setting] | image_url: width: 400 }}">
                {{ section.settings[overlay_image_setting] | image_url: width: 22 | image_tag: class: 'grid-overlay-image', width: 22, height: 22, loading: 'lazy' }}
              </div>
            {%- endif -%}
          </div>
        {%- endif -%}
      {%- endfor -%}
    </div>
  </div>
</div>

{% comment %} Product Quick View Modal Structure {% endcomment %}
<div class="product-modal-overlay">
  <div class="product-modal">
    <button class="close-modal-button">&times;</button>
    <div class="modal-content-wrapper">
      <div class="modal-image-container">
        <img src="" alt="Product Image" class="modal-product-image" onerror="this.src='https://placehold.co/400x400/cccccc/333333?text=No+Image'">
      </div>
      <div class="modal-details">
        <h3 class="modal-product-title"></h3>
        <p class="modal-product-price"></p>
        <p class="modal-product-description"></p>

        <div class="color-selector">
          <span class="color-label">Color</span>
          <div class="color-options">
            <div class="color-option" data-color="White">White</div>
            <div class="color-option" data-color="Black">Black</div>
            <!-- Add more colors as needed. In a real scenario, these would be dynamic from product data. -->
          </div>
        </div>

        <div class="size-selector">
          <span class="size-label">Size</span>
          <div class="dropdown-header">
            <span class="selected-size">Choose your size</span>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor">
              <path d="M7 10l5 5 5-5z"/>
            </svg>
          </div>
          <div class="dropdown-list">
            <!-- Size options will be dynamically populated here by JavaScript -->
          </div>
        </div>

        <button class="add-to-cart-button">
          ADD TO CART
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z"/>
          </svg>
        </button>
        <p class="add-to-cart-success">Item added to cart!</p>
      </div>
    </div>
  </div>
</div>

<script>
  // This script handles the interactive functionality of the image grid:
  // - Opening and closing the product quick-view modal.
  // - Populating product details (image, title, price, description) within the modal.
  // - Managing color and size selection.
  // - Toggling the size dropdown and ensuring it overlays correctly.
  // - Simulating an 'Add to Cart' action.

  document.addEventListener('DOMContentLoaded', function() {
    // --- DOM Element References ---
    const modalOverlay = document.querySelector('.product-modal-overlay');
    const closeModalButton = document.querySelector('.close-modal-button');
    const overlayButtons = document.querySelectorAll('.overlay-button'); // Buttons that trigger the modal

    const modalProductImage = document.querySelector('.modal-product-image');
    const modalProductTitle = document.querySelector('.modal-product-title');
    const modalProductPrice = document.querySelector('.modal-product-price');
    const modalProductDescription = document.querySelector('.modal-product-description');
    const colorOptions = document.querySelectorAll('.color-option'); // Individual color choice elements
    const sizeDropdownHeader = document.querySelector('.size-selector .dropdown-header'); // The clickable part of the size dropdown
    const sizeDropdownList = document.querySelector('.size-selector .dropdown-list');     // The actual list of sizes
    const selectedSizeSpan = document.querySelector('.size-selector .selected-size');   // Text to show currently selected size
    const addToCartButton = document.querySelector('.add-to-cart-button');
    const addToCartSuccessMessage = document.querySelector('.add-to-cart-success');

    // --- State Variables ---
    let currentProductHandle = null; // Stores the handle of the product currently in the modal
    let selectedColor = null;        // Stores the user's selected color
    let selectedSize = null;         // Stores the user's selected size

    // --- Mock Product Data (In a real Shopify theme, this would come from Shopify's API/product object) ---
    // This object simulates how product details might be structured.
    const mockProductDetails = {
      'orange-wide-leg': {
        title: 'Orange Wide Leg',
        price: '980,00€',
        description: 'This one-piece swimsuit is crafted from jersey featuring an allover micro Monogram motif in relief. Perfect for a stylish day out.',
        colors: ['White', 'Black', 'Orange'],
        sizes: ['XS', 'S', 'M', 'L', 'XL']
      },
      'blue-denim-jeans': { // Example for another product
        title: 'Blue Denim Jeans',
        price: '120,00€',
        description: 'Classic fit blue denim jeans, perfect for everyday wear. Made from 100% organic cotton.',
        colors: ['Blue', 'Black'],
        sizes: ['28', '30', '32', '34', '36']
      },
      // You can add more product objects here corresponding to your section.settings.product_X handles
    };

    // --- Modal Control Functions ---

    /**
     * Opens the product quick view modal and populates it with product data.
     * @param {string} productHandle - The handle of the product to display.
     * @param {string} imageUrl - The URL of the product's image.
     */
    function openModal(productHandle, imageUrl) {
      currentProductHandle = productHandle; // Set the current product handle for cart logic

      const product = mockProductDetails[productHandle]; // Get mock product data

      if (product) {
        // Populate modal content
        modalProductImage.src = imageUrl || 'https://placehold.co/400x400/cccccc/333333?text=No+Image';
        modalProductTitle.textContent = product.title;
        modalProductPrice.textContent = product.price;
        modalProductDescription.textContent = product.description;

        // Reset selections and success message when modal opens
        selectedColor = null;
        selectedSize = null;
        selectedSizeSpan.textContent = 'Choose your size'; // Reset dropdown text
        addToCartSuccessMessage.style.display = 'none'; // Hide success message

        // Update color options visibility and selection state
        colorOptions.forEach(option => {
          option.classList.remove('selected'); // Deselect all colors
          if (product.colors && product.colors.includes(option.dataset.color)) {
            option.style.display = 'block'; // Show colors available for this product
          } else {
            option.style.display = 'none'; // Hide colors not available
          }
        });

        // Populate size dropdown dynamically based on product.sizes
        sizeDropdownList.innerHTML = ''; // Clear existing size options
        if (product.sizes && product.sizes.length > 0) {
          product.sizes.forEach(size => {
            const sizeItem = document.createElement('div');
            sizeItem.classList.add('dropdown-item');
            sizeItem.textContent = size;
            sizeItem.dataset.size = size; // Store size in data attribute
            sizeDropdownList.appendChild(sizeItem);
          });
        } else {
          // Handle case where product has no sizes
          const noSizeItem = document.createElement('div');
          noSizeItem.classList.add('dropdown-item');
          noSizeItem.textContent = 'N/A';
          noSizeItem.style.pointerEvents = 'none'; // Make it non-clickable
          sizeDropdownList.appendChild(noSizeItem);
        }


        // Activate modal and prevent background scrolling
        modalOverlay.classList.add('active');
        document.body.style.overflow = 'hidden';
      } else {
        console.error('Product details not found for handle:', productHandle);
        // Fallback to a custom message box instead of alert()
        displayMessageBox('Error: Could not load product details. Please try again.');
      }
    }

    /**
     * Closes the product quick view modal.
     */
    function closeModal() {
      modalOverlay.classList.remove('active');
      document.body.style.overflow = ''; // Restore background scrolling
      sizeDropdownList.classList.remove('active'); // Ensure dropdown is closed
      sizeDropdownHeader.classList.remove('active'); // Ensure header state is reset
    }

    // --- Event Listeners for Modal Opening ---
    overlayButtons.forEach(button => {
      button.addEventListener('click', function(event) {
        event.stopPropagation(); // Prevent clicks from bubbling up to parent elements
        const productHandle = this.dataset.productHandle;
        const imageUrl = this.dataset.gridImageUrl;
        openModal(productHandle, imageUrl);
      });
    });

    // --- Event Listeners for Modal Closing ---
    closeModalButton.addEventListener('click', closeModal); // Close button click
    modalOverlay.addEventListener('click', function(event) {
      if (event.target === modalOverlay) { // Close when clicking outside the modal content
        closeModal();
      }
    });

    // --- Color Selection Logic ---
    colorOptions.forEach(option => {
      option.addEventListener('click', function() {
        // Ensure only one color is selected at a time
        colorOptions.forEach(opt => opt.classList.remove('selected'));
        this.classList.add('selected');
        selectedColor = this.dataset.color;
        console.log('Selected color:', selectedColor);
      });
    });

    // --- Size Dropdown Toggle Logic ---
    sizeDropdownHeader.addEventListener('click', function(event) {
      event.stopPropagation(); // Stop click from closing modal if dropdown is inside
      sizeDropdownList.classList.toggle('active'); // Toggle visibility of the list
      sizeDropdownHeader.classList.toggle('active'); // Toggle arrow rotation and border style
    });

    // --- Size Selection Logic ---
    sizeDropdownList.addEventListener('click', function(event) {
      if (event.target.classList.contains('dropdown-item')) {
        // Deselect previous size and select the new one
        sizeDropdownList.querySelectorAll('.dropdown-item').forEach(item => item.classList.remove('selected'));
        event.target.classList.add('selected');
        selectedSize = event.target.dataset.size;
        selectedSizeSpan.textContent = selectedSize; // Update the displayed selected size
        sizeDropdownList.classList.remove('active'); // Close dropdown after selection
        sizeDropdownHeader.classList.remove('active'); // Reset header state
        console.log('Selected size:', selectedSize);
      }
    });

    // --- Close dropdown if clicking anywhere outside the dropdown itself ---
    document.addEventListener('click', function(event) {
      if (!sizeDropdownHeader.contains(event.target) && !sizeDropdownList.contains(event.target)) {
        sizeDropdownList.classList.remove('active');
        sizeDropdownHeader.classList.remove('active');
      }
    });

    // --- Add to Cart Logic ---
    addToCartButton.addEventListener('click', function() {
      if (!selectedColor || !selectedSize) {
        // Use a custom message box instead of alert()
        displayMessageBox('Please select both a color and a size before adding to cart.');
        return;
      }

      console.log(`Adding ${selectedColor} ${selectedSize} of ${currentProductHandle} to cart.`);
      // In a *real* Shopify theme, you would make an AJAX call here
      // to add the selected variant to the cart. Example:
      /*
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          items: [{
            product_id: currentProductId, // You'd need to get the actual product ID
            variant_id: selectedVariantId, // You'd need to find the variant ID based on color/size
            quantity: 1
          }]
        })
      })
      .then(response => response.json())
      .then(data => {
        console.log('Item added to cart:', data);
        addToCartSuccessMessage.style.display = 'block';
        setTimeout(() => {
          addToCartSuccessMessage.style.display = 'none';
          closeModal();
        }, 2000); // Hide message and close modal after 2 seconds
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        displayMessageBox('There was an error adding the item to your cart.');
      });
      */

      // For this example, we'll just show the success message
      addToCartSuccessMessage.style.display = 'block';
      setTimeout(() => {
        addToCartSuccessMessage.style.display = 'none';
        closeModal();
      }, 2000); // Hide message and close modal after 2 seconds
    });

    // --- Custom Message Box Function (replaces alert()) ---
    // You would integrate this with your theme's existing modal/notification system
    function displayMessageBox(message) {
      console.warn("Message Box (replace with custom UI):", message);
      // For a real app, implement a custom modal or toast notification here.
      // Example (very basic, replace with robust UI):
      const existingMessageBox = document.getElementById('custom-message-box');
      if (existingMessageBox) {
        existingMessageBox.remove();
      }
      const messageBox = document.createElement('div');
      messageBox.id = 'custom-message-box';
      messageBox.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #fff;
        padding: 20px 30px;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        z-index: 2000;
        text-align: center;
        font-family: 'Inter', sans-serif;
        color: #333;
        font-size: 1.1rem;
        max-width: 300px;
      `;
      messageBox.innerHTML = `
        <p>${message}</p>
        <button style="
          margin-top: 15px;
          padding: 8px 15px;
          background-color: #007bff;
          color: #fff;
          border: none;
          border-radius: 5px;
          cursor: pointer;
        ">OK</button>
      `;
      document.body.appendChild(messageBox);
      messageBox.querySelector('button').addEventListener('click', () => {
        messageBox.remove();
      });
      setTimeout(() => { // Auto-remove after some time
          if (messageBox && messageBox.parentNode) {
              messageBox.remove();
          }
      }, 5000);
    }

  });
</script>


{% schema %}
{
  "name": "Image Grid Section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "Image Grid"
    },
    {
      "type": "image_picker",
      "id": "image_1",
      "label": "Image 1 (Main)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_1",
      "label": "Overlay Image 1 (Optional)"
    },
    {
      "type": "product",
      "id": "product_1",
      "label": "Link Product 1"
    },
    {
      "type": "image_picker",
      "id": "image_2",
      "label": "Image 2 (Top Right)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_2",
      "label": "Overlay Image 2 (Optional)"
    },
    {
      "type": "product",
      "id": "product_2",
      "label": "Link Product 2"
    },
    {
      "type": "image_picker",
      "id": "image_3",
      "label": "Image 3 (Top Right)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_3",
      "label": "Overlay Image 3 (Optional)"
    },
    {
      "type": "product",
      "id": "product_3",
      "label": "Link Product 3"
    },
    {
      "type": "image_picker",
      "id": "image_4",
      "label": "Image 4 (Bottom Left)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_4",
      "label": "Overlay Image 4 (Optional)"
    },
    {
      "type": "product",
      "id": "product_4",
      "label": "Link Product 4"
    },
    {
      "type": "image_picker",
      "id": "image_5",
      "label": "Image 5"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_5",
      "label": "Overlay Image 5 (Optional)"
    },
    {
      "type": "product",
      "id": "product_5",
      "label": "Link Product 5"
    }
  ],
  "presets": [
    {
      "name": "Image Grid",
      "category": "Image"
    }
  ]
}
{% endschema %}

