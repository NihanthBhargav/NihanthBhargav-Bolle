<div class="image-grid-section">
  <div class="page-width">
    <div class="grid-header">
      <h2 class="grid-title">{{ section.settings.title }}</h2>
    </div>

    <div class="image-grid-container">
      {% comment %} Grid Item 1 {% endcomment %}
      <div class="grid-item">
        {% if section.settings.image_1 != blank %}
          {{ section.settings.image_1 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% else %}
          <div class="placeholder-image">
            {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {% endif %}
        {% if section.settings.overlay_image_1 != blank %}
           <div class="overlay-button" data-product-handle="{{ section.settings.product_1 }}">
            {{ section.settings.overlay_image_1 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-1', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      {% comment %} Grid Item 2 {% endcomment %}
      <div class="grid-item">
        {% if section.settings.image_2 != blank %}
           {{ section.settings.image_2 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% else %}
          <div class="placeholder-image">
            {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {% endif %}
        {% if section.settings.overlay_image_2 != blank %}
           <div class="overlay-button" data-product-handle="{{ section.settings.product_2 }}">
            {{ section.settings.overlay_image_2 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-2', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      {% comment %} Grid Item 3 {% endcomment %}
      <div class="grid-item">
        {% if section.settings.image_3 != blank %}
           {{ section.settings.image_3 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% else %}
          <div class="placeholder-image">
            {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {% endif %}
        {% if section.settings.overlay_image_3 != blank %}
           <div class="overlay-button" data-product-handle="{{ section.settings.product_3 }}">
            {{ section.settings.overlay_image_3 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-3', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      {% comment %} Grid Item 4 {% endcomment %}
      <div class="grid-item">
        {% if section.settings.image_4 != blank %}
           {{ section.settings.image_4 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% else %}
          <div class="placeholder-image">
            {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {% endif %}
        {% if section.settings.overlay_image_4 != blank %}
          <div class="overlay-button" data-product-handle="{{ section.settings.product_4 }}">
            {{ section.settings.overlay_image_4 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-4', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      {% comment %} Grid Item 5 {% endcomment %}
      <div class="grid-item">
        {% if section.settings.image_5 != blank %}
           {{ section.settings.image_5 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% else %}
          <div class="placeholder-image">
            {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {% endif %}
        {% if section.settings.overlay_image_5 != blank %}
           <div class="overlay-button" data-product-handle="{{ section.settings.product_5 }}">
            {{ section.settings.overlay_image_5 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-5', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>

      {% comment %} Grid Item 6 {% endcomment %}
      <div class="grid-item">
        {% if section.settings.image_6 != blank %}
           {{ section.settings.image_6 | image_url: width: 600 | image_tag: class: 'grid-image', width: 600, height: 615 }}
        {% else %}
          <div class="placeholder-image">
            {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {% endif %}
        {% if section.settings.overlay_image_6 != blank %}
           <div class="overlay-button" data-product-handle="{{ section.settings.product_6 }}">
            {{ section.settings.overlay_image_6 | image_url: width: 22 | image_tag: class: 'grid-overlay-image grid-overlay-image-6', width: 22, height: 22 }}
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>

{% comment %} Product Quick View Modal HTML {% endcomment %}
<div id="product-quick-view-modal" class="product-quick-view-modal" style="display: none;">
  <div class="modal-overlay"></div>
  <div class="modal-content">
    <button class="modal-close-button">&times;</button>
    <div class="modal-elements-container">  
        <div class="modal-product-image-wrapper">
          <img src="" alt="Product Image" class="modal-product-image">
        </div>
        <h3 class="modal-product-title"></h3>
        <p class="modal-product-price"></p>
        <div class="modal-product-description"></div>

        <div class="modal-variant-options">
           
        </div>

        <div class="modal-add-to-cart-form">
          <input type="number" class="modal-quantity-selector" value="1" min="1">
          <button class="modal-add-to-cart-button">ADD TO CART â†’</button>
        </div>
    </div>
  </div>
</div>

<style>
  /* Base font for the theme */
  body {
    font-family: 'Jost', sans-serif; /* Your specified font from the dropdown code */
  }

  .image-grid-section {
    padding: 50px 0;
    background-color: white;
  }

  .page-width {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 50px;
    box-sizing: border-box;
  }

  .grid-header {
    margin-bottom: 40px;
    text-align: left;
  }

  .grid-title {
    width: 372px;
    height: 43px;
    font-family: 'Lustria', serif;
    font-weight: 400;
    font-size: 36px;
    line-height: 120%;
    letter-spacing: 0px;
    color: black;
    margin: 0;
  }

  .image-grid-container {
    display: grid;
    grid-template-columns: repeat(3, minmax(250px, 433px));
    gap: 20px;
    justify-content: center;
    align-items: center;
  }

  .grid-item {
    position: relative;
    overflow: hidden;
    background-color: #f0f0f0;
    display: flex;
    justify-content: center;
    align-items: center;
    aspect-ratio: 433 / 444;
    opacity: 1;
  }

  .grid-image {
    width: 100%;
    height: 100%;
    display: block;
    object-fit: cover;
    /* Removed: transition for scale effect on main image */
  }

  .placeholder-image {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .placeholder-svg {
    max-width: 50%;
    max-height: 50%;
    opacity: 0.5;
  }

  /* Overlay button wrapper (for click event) */
  .overlay-button {
    position: absolute;
    width: 100%;
    height: 100%;
    cursor: pointer;
    z-index: 10;
  }

  /* Hover effect for the overlay button, targeting the image inside it */
  .overlay-button:hover .grid-overlay-image {
    transform: translate(-50%, -50%) scale(1.1); /* Slightly enlarge the image */
    transition: transform 0.2s ease-in-out; /* Smooth transition */
  }

  /* General styles for all overlay images */
  .grid-overlay-image {
    position: absolute;
    z-index: 9;
    pointer-events: none; /* Allows clicks to pass through to the parent .overlay-button */
    background: white;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 1;
    width: 22px; /* Fixed size as per your request */
    height: 22px; /* Fixed size as per your request */
    transform: translate(-50%, -50%); /* Centers the image on its top/left point */
    /* Add transition for smooth hover effect if other properties are animated */
    transition: transform 0.2s ease-in-out;
  }

  /* Specific styles for each overlay image - **THESE ARE PIXEL-BASED AND WILL LIKELY CAUSE NON-RESPONSIVE BEHAVIOR.**
     They are kept as per your request for initial 'perfect shape' on larger screens.
     You will need to manually adjust these (e.g., to percentages) in media queries for responsiveness.
  */
  .grid-overlay-image-1 {
    top: 238px;
    left: 256.5px;
  }

  .grid-overlay-image-2 {
    top: 222px;
    left: 355.2px;
  }

  .grid-overlay-image-3 {
    top: 82px;
    left: 261px;
  }

  .grid-overlay-image-4 {
    top: 71px;
    left: 301.5px;
  }

  .grid-overlay-image-5 {
    top: 104px;
    left: 212.5px;
  }

  .grid-overlay-image-6 {
    top: 164px;
    left: 319.5px;
  }


  /* Responsive Design */
  @media screen and (max-width: 1400px) {
    .page-width {
      padding: 0 30px;
    }
    .image-grid-container {
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 15px;
    }
    .grid-item {
      width: auto;
      height: auto;
      aspect-ratio: 433 / 444;
    }
    /* WARNING: Fixed pixel positioning of overlays will be problematic here.
       They will not scale/move proportionally with the images.
       You will need to re-evaluate their positioning to use percentages here
       if you want them responsive.
    */
    .grid-overlay-image { /* Generic responsive adjustments if needed */
      width: 5%; /* Example: small percentage size */
      height: auto;
      top: 15%; /* Example for mobile positioning */
      right: 15%; /* Example for mobile positioning */
      left: auto; /* Override fixed left */
      transform: translate(0,0); /* Remove transform if no longer centering on a point */
    }
  }

  @media screen and (max-width: 768px) {
    .page-width {
      padding: 0 20px;
    }
    .grid-title {
      width: auto;
      height: auto;
      font-size: 28px;
      text-align: center;
      margin: 0 auto 30px auto;
    }
    .grid-header {
      padding: 0 20px;
    }
    .image-grid-container {
      grid-template-columns: 1fr;
      gap: 10px;
    }
    .grid-overlay-image {
      width: 20px;
      height: 20px;
    }

    /* Modal Responsive Styling Adjustments - Re-enable flexible layout for mobile */
    .modal-content {
      width: 90%;
      height: auto;
      padding: 15px;
      flex-direction: column; /* Stack vertically on mobile */
      align-items: flex-start; /* Align content to start */
    }

    .modal-elements-container {
        position: static; /* Disable absolute positioning on mobile */
        width: 100%;
        height: auto;
        overflow-y: visible;
        padding: 0;
    }

    .modal-product-image-wrapper {
        position: static; /* Disable absolute positioning on mobile */
        width: 100%;
        height: auto;
        margin-bottom: 15px; /* Add space below image */
        object-fit: contain; /* Ensure image fits */
    }

    .modal-product-image {
        position: static; /* Disable absolute positioning on mobile */
        width: 100%;
        height: auto;
    }

    .modal-product-title,
    .modal-product-price,
    .modal-product-description,
    .modal-variant-options,
    .modal-add-to-cart-form {
        position: static; /* Disable absolute positioning on mobile */
        width: 100%;
        height: auto;
        margin-left: 0;
        margin-top: 0;
        padding: 0; /* Remove fixed padding */
    }

    .modal-product-title {
        font-size: 1.5em; /* Restore larger mobile font size */
    }
    .modal-product-price {
        font-size: 1.2em;
    }
    .modal-product-description {
        font-size: 0.9em;
    }

    .modal-add-to-cart-form {
      flex-direction: column;
      width: 100%;
    }
    .modal-quantity-selector {
      width: 100%;
    }
    .modal-add-to-cart-button {
      width: 100%;
    }

    .variant-option-group {
      margin-bottom: 10px; /* Smaller margin between variant groups on mobile */
    }
    .variant-option-group label {
      margin-bottom: 5px; /* Smaller margin for label on mobile */
    }
    .variant-option-values {
      gap: 5px; /* Smaller gap for pills on mobile */
    }
    .custom-dropdown-container {
      width: 100%;
    }
  }

  /* Styles for Product Quick View Modal */
  .product-quick-view-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; /* Ensure it's on top of everything */
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7); /* Dark overlay */
  }

  .modal-content {
    background-color: white;
    padding: 0; /* Remove padding as elements will be absolutely positioned inside */
    border-radius: 0; /* Sharp borders */
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    position: relative; /* Crucial for absolute positioning of children */
    z-index: 1001;
    width: 311px;
    height: 447px;
    transform: rotate(0deg); /* Explicitly set angle */
    opacity: 1; /* Explicitly set opacity */
    /* Removed display:flex and gap as child elements will be absolute */
    animation: fadeIn 0s ease-out;
    overflow: hidden; /* Hide overflow from absolutely positioned elements if they go outside */
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .modal-close-button {
    position: absolute;
    top: 15px;
    right: 15px;
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #333;
    z-index: 1003; /* Ensure close button is always on top */
  }

  .modal-elements-container { /* New wrapper for all absolutely positioned elements */
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    /* No padding here, elements position relative to content box edge */
    /* overflow-y: auto; */ /* Enable scrolling if content exceeds height, but complex with absolute children */
  }

  .modal-product-image-wrapper {
    position: absolute;
    width: 120px; /* From your specified properties */
    height: 140px; /* From your specified properties */
    top: 36px; /* From your specified properties */
    left: 17px; /* From your specified properties */
    transform: rotate(0deg); /* From your specified properties */
    opacity: 1; /* From your specified properties */
    overflow: hidden; /* In case image doesn't perfectly fit */
    border-radius: 0; /* Sharp borders */
  }

  .modal-product-image {
    width: 100%;
    height: 100%; /* Fill the wrapper */
    display: block;
    border-radius: 0; /* Sharp borders */
    object-fit: cover; /* Crop image to fill the 120x140 space */
  }


  /* TEXT CONTEXTS - ABSOLUTELY POSITIONED */
  .modal-product-title { /* Orange Wide Leg */
    position: absolute;
    width: 136px; /* From your specified properties */
    height: 19px; /* From your specified properties */
    top: 49px; /* From your specified properties */
    left: 145px; /* From your specified properties */
    font-family: 'Jost', sans-serif; /* From your specified properties */
    font-weight: 300; /* From your specified properties (Light) */
    font-size: 16px; /* From your specified properties */
    line-height: 120%; /* From your specified properties */
    letter-spacing: 0px; /* From your specified properties */
    text-align: left; /* Default text alignment */
    color: black; /* Assuming default text color */
    overflow: hidden; /* Hide if text overflows fixed height */
    white-space: nowrap; /* Prevent wrapping if text is long for fixed width */
    text-overflow: ellipsis; /* Add ellipsis for overflowed text */
    z-index: 2; /* Ensure text is above image if overlapping */
  }

  .modal-product-price { /* 980,00â‚¬ */
    position: absolute;
    width: 64px; /* From your specified properties */
    height: 19px; /* From your specified properties */
    top: 88px; /* From your specified properties */
    left: 145px; /* From your specified properties */
    font-family: 'Lustria', serif; /* From your specified properties */
    font-weight: 400; /* From your specified properties (Regular) */
    font-size: 16px; /* From your specified properties */
    line-height: 120%; /* From your specified properties */
    letter-spacing: 0px; /* From your specified properties */
    text-align: left; /* Default text alignment */
    color: #333; /* Assuming default price color */
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    z-index: 2; /* Ensure text is above image if overlapping */
  }

  .modal-product-description { /* This one-piece swimsuit... */
    position: absolute;
    width: 146px; /* From your specified properties */
    height: 60px; /* From your specified properties */
    top: 119px; /* From your specified properties */
    left: 145px; /* From your specified properties */
    font-family: 'Jost', sans-serif; /* From your specified properties */
    font-weight: 300; /* From your specified properties (Light) */
    font-size: 14px; /* From your specified properties */
    line-height: 110%; /* From your specified properties (adjusted from 110.00000000000001% to 110%) */
    letter-spacing: -1%; /* From your specified properties */
    text-align: left; /* Default text alignment */
    color: #666; /* Assuming default description color */
    overflow-y: auto; /* Allow scrolling for description if it overflows its fixed height */
    z-index: 2; /* Ensure text is above image if overlapping */
  }

  .modal-variant-options {
    position: absolute;
    /* NEW: Positioned below the description. Description top 119px + height 60px + margin. */
    top: 190px; /* Calculated: 119 (desc top) + 60 (desc height) + ~11px (spacing) */
    left: 17px; /* Aligned with image left */
    width: calc(100% - 34px); /* Full width minus left/right padding */
    height: 130px; /* Giving it a fixed height for absolute positioning flow */
    overflow-y: auto; /* Allow scrolling if many variants */
    display: block; /* Ensures block layout for variant groups */
    z-index: 2; /* Ensure variants are above image if overlapping */
  }

  .variant-option-group {
    margin-bottom: 10px; /* Space between each option group */
    width: 100%;
    height: auto;
    display: flex; /* Keep internal flex for label/input */
    flex-direction: column;
    justify-content: flex-start; /* Align to top */
  }

  .variant-option-group label {
    display: block;
    font-weight: bold;
    margin-bottom: 5px;
    font-size: 0.8em;
    color: #333;
  }

  .variant-option-values {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
  }

  .variant-option-value-pill {
    padding: 6px 10px;
    border: 1px solid #ccc;
    border-radius: 0; /* Sharp borders */
    cursor: pointer;
    font-size: 0.8em;
    background-color: white;
    color: #333;
    transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;
  }

  .variant-option-value-pill.selected {
    background-color: black;
    color: white;
    border-color: black;
  }

  .variant-option-value-pill:hover:not(.selected) {
    background-color: #eee;
  }

  /* Custom dropdown styles */
  .custom-dropdown-container {
    position: relative; /* Position relative to its parent .variant-option-group */
    width: 100%; /* Adjusted to be 100% of its parent group for absolute layout */
    border: 1px solid #ccc;
    cursor: pointer;
    font-family: 'Jost', sans-serif;
    border-radius: 0; /* Sharp borders */
  }

  .custom-dropdown-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 35px;
  }

  .custom-dropdown-header span {
    font-size: 14px;
    flex: 1;
    padding: 0 8px;
    line-height: 35px;
  }

  /* Vertical line separator */
  .custom-line {
    border-left: 0.5px solid #000;
    height: 100%;
  }

  .custom-arrow {
    border: solid black;
    border-width: 0 2px 2px 0;
    display: inline-block;
    padding: 3px;
    margin: 0 8px;
    transform: rotate(45deg);
    transition: transform 300ms ease-out;
  }

  .custom-arrow.up {
    transform: rotate(-135deg);
  }

  .custom-dropdown-list {
    display: none;
    position: absolute;
    width: 100%;
    background: #fff;
    z-index: 100;
    border: 1px solid #ccc;
    border-top: none;
    font-family: 'Jost', sans-serif;
    border-radius: 0; /* Sharp borders */
  }

  .custom-dropdown-list div {
    padding: 10px;
    text-align: center;
    cursor: pointer;
    border-top: 1px solid #ccc;
    transition: all 300ms ease-out;
  }

  .custom-dropdown-list div:last-child {
    border-bottom: 1px solid #ccc;
  }

  /* Hover effect */
  .custom-dropdown-list div:hover {
    background: #000;
    color: #fff;
  }


  .modal-add-to-cart-form {
    position: absolute;
    /* NEW: Positioned below variants. Variant top 190px + height 130px + spacing. */
    top: 330px; /* Calculated: 190 (variant top) + 130 (variant height) + ~10px (spacing) */
    left: 17px; /* Align with other left-aligned elements */
    width: calc(100% - 34px); /* Fill width minus left/right offset */
    display: flex;
    gap: 10px;
    align-items: center;
    flex-wrap: wrap;
    z-index: 2; /* Ensure button is above image if overlapping */
  }

  .modal-quantity-selector {
    width: 70px;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 0; /* Sharp borders */
    text-align: center;
    font-size: 0.9em;
  }

  .modal-add-to-cart-button {
    background-color: black;
    color: white;
    padding: 10px 18px;
    border: none;
    border-radius: 0; /* Sharp borders */
    cursor: pointer;
    font-size: 1em;
    font-weight: bold;
    transition: background-color 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
    flex-grow: 1;
  }

  .modal-add-to-cart-button:hover {
    background-color: #333;
  }

  /* --- CUSTOM COLOR SELECTOR STYLES --- */
  /* These styles are taken directly from your provided HTML snippet */

  fieldset.color-container { /* Renamed from original for better specificity/avoiding global conflicts */
    border: none;
    padding: 0;
    margin: 0;
    min-width: 0;
    width: 100%; /* Ensure it takes full width of variant option group */
  }

  fieldset.color-container legend { /* Renamed for specificity */
    font-size: 14px;
    font-weight: 400;
    margin-bottom: 5px;
    padding: 0;
  }

  /* Outer container */
  .color-box {
    position: relative;
    display: flex;
    width: 271px; /* Fixed width as per your design */
    height: 40.4413px;
    border: 0.5px solid #000;
    box-sizing: border-box;
    overflow: hidden;
  }

  /* Sliding background */
  .color-box .slider { /* Added .color-box for specificity */
    position: absolute;
    top: 0;
    left: 0;
    width: 50%;
    height: 100%;
    background: #000;
    transition: transform 0.4s ease;
    z-index: 1;
    display: none; /* Initially hidden, shown on selection */
  }

  .color-box .slider.right {
    transform: translateX(100%);
  }

  /* Each option */
  .color-option {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 18px;
    text-transform: capitalize;
    position: relative;
    cursor: pointer;
    z-index: 2; /* on top of slider */
    transition: color 0.4s ease;
    color: #000; /* default black text */
  }

  /* Swatch styles */
  .color-swatch {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    border-right: 0.5px solid #000;
    pointer-events: none;
    z-index: 3;
  }

  .white-swatch {
    width: 5.8071px;
    background: #fff;
  }

  .black-swatch {
    width: 4.8392px;
    background: #000;
  }

  /* Active state */
  .color-option.active { /* Added .color-option for specificity */
    color: #fff !important;
  }

</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const quickViewModal = document.getElementById('product-quick-view-modal');
    const modalCloseButton = quickViewModal.querySelector('.modal-close-button');
    const modalOverlay = quickViewModal.querySelector('.modal-overlay');
    const modalProductImage = quickViewModal.querySelector('.modal-product-image');
    const modalProductTitle = quickViewModal.querySelector('.modal-product-title');
    const modalProductPrice = quickViewModal.querySelector('.modal-product-price');
    const modalProductDescription = quickViewModal.querySelector('.modal-product-description');
    const modalVariantOptions = quickViewModal.querySelector('.modal-variant-options');
    const modalQuantitySelector = quickViewModal.querySelector('.modal-quantity-selector');
    const modalAddToCartButton = quickViewModal.querySelector('.modal-add-to-cart-button');

    let currentProductData = null; // Store fetched product data globally for variant selection

    // Helper to format money
    const formatMoney = (cents) => {
      if (typeof Shopify === 'undefined' || !Shopify.currency) {
        // Fallback if Shopify object is not available
        return `$${(cents / 100).toFixed(2)}`;
      }
      return new Intl.NumberFormat(Shopify.currency.active, {
          style: 'currency',
          currency: Shopify.currency.active || 'USD'
      }).format(cents / 100);
    };

    // Function to update modal content based on selected variant
    const updateVariantInfo = () => {
      if (!currentProductData) return;

      const selectedOptions = {};
      let allOptionsSelected = true; // Flag to check if all necessary options have a valid selection

      modalVariantOptions.querySelectorAll('.variant-option-group').forEach(group => {
        const optionName = group.dataset.optionName;

        if (optionName.toLowerCase() === 'size') {
            // Check for custom dropdown selection (Size)
            const customDropdownSelectedSpan = group.querySelector('.custom-dropdown-header span.selected-value');
            if (customDropdownSelectedSpan) {
                const selectedText = customDropdownSelectedSpan.textContent;
                // Only consider it a valid selection if it's not the default "Choose your size"
                if (selectedText && selectedText !== "Choose your size") {
                    selectedOptions[optionName] = selectedText;
                } else {
                    allOptionsSelected = false; // A custom dropdown option is not yet chosen
                }
            } else {
                allOptionsSelected = false; // Size dropdown element not found or incorrectly structured
            }
        } else if (optionName.toLowerCase() === 'color') {
            // Check for custom color selector selection (Color)
            const activeColorOption = group.querySelector('.color-option.active');
            if (activeColorOption) {
                selectedOptions[optionName] = activeColorOption.dataset.value;
            } else {
                allOptionsSelected = false; // A color option is not yet chosen
            }
        }
         else {
            // Check for pill selection (other variants)
            const selectedPill = group.querySelector('.variant-option-value-pill.selected');
            if (selectedPill) {
                selectedOptions[optionName] = selectedPill.dataset.value;
            } else {
                allOptionsSelected = false; // A pill option is not yet chosen
            }
        }
      });

      let selectedVariant = null;
      if (allOptionsSelected) { // Only try to find a variant if all options have been selected by the user
          selectedVariant = currentProductData.variants.find(variant => {
            return Object.keys(selectedOptions).every(optionName => {
              const optionIndex = currentProductData.options.findIndex(opt => opt.name === optionName);
              // Ensure optionIndex is valid before accessing variant.options
              if (optionIndex === -1) return false;
              return variant.options[optionIndex] === selectedOptions[optionName];
            });
          });
      }


      if (selectedVariant) {
        modalProductPrice.textContent = formatMoney(selectedVariant.price);
        modalAddToCartButton.dataset.variantId = selectedVariant.id;
        modalAddToCartButton.disabled = selectedVariant.available ? false : true;
        modalAddToCartButton.textContent = selectedVariant.available ? 'ADD TO CART â†’' : 'SOLD OUT';
        modalQuantitySelector.disabled = !selectedVariant.available;

        // Update modal image if variant has a different featured image
        if (selectedVariant.featured_image && selectedVariant.featured_image.src) {
            modalProductImage.src = selectedVariant.featured_image.src;
            if (selectedVariant.featured_image.width && selectedVariant.featured_image.height) {
                modalProductImage.setAttribute('width', selectedVariant.featured_image.width);
                modalProductImage.setAttribute('height', selectedVariant.featured_image.height);
            } else {
                modalProductImage.removeAttribute('width');
                modalProductImage.removeAttribute('height');
            }
        } else if (currentProductData.featured_image && currentProductData.featured_image.src) {
            // Fallback to main product image if variant doesn't have one
            modalProductImage.src = currentProductData.featured_image.src;
            if (currentProductData.featured_image.width && currentProductData.featured_image.height) {
                modalProductImage.setAttribute('width', currentProductData.featured_image.width);
                modalProductImage.setAttribute('height', currentProductData.featured_image.height);
            } else {
                modalProductImage.removeAttribute('width');
                modalProductImage.removeAttribute('height');
            }
        } else {
            modalProductImage.src = 'https://placehold.co/400x400/cccccc/ffffff?text=No+Image';
            modalProductImage.removeAttribute('width');
            modalProductImage.removeAttribute('height');
        }

      } else {
        // If not all options are selected, or no matching variant is found
        modalProductPrice.textContent = ''; // Clear price
        modalAddToCartButton.dataset.variantId = '';
        modalAddToCartButton.disabled = true;
        modalAddToCartButton.textContent = 'SELECT OPTIONS'; // Prompt user to select options
        modalQuantitySelector.disabled = true;
        // Keep the main product image if no variant is specifically selected
        if (currentProductData.featured_image && currentProductData.featured_image.src) {
            modalProductImage.src = currentProductData.featured_image.src;
            if (currentProductData.featured_image.width && currentProductData.featured_image.height) {
                modalProductImage.setAttribute('width', currentProductData.featured_image.width);
                modalProductImage.setAttribute('height', currentProductData.featured_image.height);
            } else {
                modalProductImage.removeAttribute('width');
                modalProductImage.removeAttribute('height');
            }
        } else {
            modalProductImage.src = 'https://placehold.co/400x400/cccccc/ffffff?text=No+Image';
            modalProductImage.removeAttribute('width');
            modalProductImage.removeAttribute('height');
        }
      }
    };

    // Function to generate variant selectors
    const generateVariantSelectors = (productData) => {
      modalVariantOptions.innerHTML = ''; // Clear previous options
      productData.options.forEach((option, optionIndex) => {
        const optionGroup = document.createElement('div');
        optionGroup.classList.add('variant-option-group');
        optionGroup.dataset.optionName = option.name;

        const label = document.createElement('label');
        label.textContent = option.name;
        optionGroup.appendChild(label);

        if (option.name.toLowerCase() === 'size') { // Use custom dropdown for "Size"
          const dropdownContainer = document.createElement('div');
          dropdownContainer.classList.add('custom-dropdown-container');

          const dropdownHeader = document.createElement('div');
          dropdownHeader.classList.add('custom-dropdown-header');
          dropdownContainer.appendChild(dropdownHeader);

          const selectedSpan = document.createElement('span');
          selectedSpan.classList.add('selected-value'); // Class for easy querying
          selectedSpan.textContent = "Choose your size"; // Initial text
          dropdownHeader.appendChild(selectedSpan);

          const lineDiv = document.createElement('div');
          lineDiv.classList.add('custom-line'); // This is the vertical line
          dropdownHeader.appendChild(lineDiv);

          const arrowI = document.createElement('i');
          arrowI.classList.add('custom-arrow');
          dropdownHeader.appendChild(arrowI);

          const dropdownList = document.createElement('div');
          dropdownList.classList.add('custom-dropdown-list');
          dropdownContainer.appendChild(dropdownList);

          option.values.forEach(value => {
            const listItem = document.createElement('div');
            listItem.textContent = value;
            listItem.dataset.value = value; // Store value for selection
            dropdownList.appendChild(listItem);
          });

          optionGroup.appendChild(dropdownContainer);
          modalVariantOptions.appendChild(optionGroup);

          // Attach custom dropdown specific event listeners
          dropdownHeader.addEventListener("click", (e) => {
            e.stopPropagation(); // Prevent modal close from immediate click
            dropdownList.style.display = dropdownList.style.display === "block" ? "none" : "block";
            arrowI.classList.toggle("up");
          });

          dropdownList.querySelectorAll("div").forEach(item => {
            item.addEventListener("click", (e) => {
                e.stopPropagation(); // Stop click from bubbling to header or container
                selectedSpan.innerText = item.innerText;
                dropdownList.style.display = "none";
                arrowI.classList.remove("up");
                updateVariantInfo(); // Trigger variant info update on selection
            });
          });

          const handleGlobalClick = (e) => {
            if (!dropdownContainer.contains(e.target) && dropdownList.style.display === "block") {
              dropdownList.style.display = "none";
              arrowI.classList.remove("up");
            }
          };
          dropdownContainer._globalClickListener = handleGlobalClick; // Store reference
          document.addEventListener("click", dropdownContainer._globalClickListener);

        } else if (option.name.toLowerCase() === 'color') { // Use custom color selector for "Color"
            const fieldset = document.createElement('fieldset');
            fieldset.classList.add('color-container'); // Use this class from your styles

            const legend = document.createElement('legend');
            legend.textContent = option.name;
            fieldset.appendChild(legend);

            const colorBox = document.createElement('div');
            colorBox.classList.add('color-box');
            fieldset.appendChild(colorBox);

            const slider = document.createElement('div');
            slider.classList.add('slider');
            colorBox.appendChild(slider);

            // Dynamically create color options based on available values for 'White' and 'Black'
            const whiteValue = option.values.find(v => v.toLowerCase() === 'white');
            const blackValue = option.values.find(v => v.toLowerCase() === 'black');

            if (whiteValue) {
                const whiteOption = document.createElement('div');
                whiteOption.classList.add('color-option');
                whiteOption.dataset.value = whiteValue; // Store the actual variant value
                whiteOption.innerHTML = `<span class="color-swatch white-swatch"></span> ${whiteValue}`;
                colorBox.appendChild(whiteOption);
            }

            if (blackValue) {
                const blackOption = document.createElement('div');
                blackOption.classList.add('color-option');
                blackOption.dataset.value = blackValue; // Store the actual variant value
                blackOption.innerHTML = `<span class="color-swatch black-swatch"></span> ${blackValue}`;
                colorBox.appendChild(blackOption);
            }

            optionGroup.appendChild(fieldset);
            modalVariantOptions.appendChild(optionGroup);

            // Attach event listeners for the custom color selector
            const whiteBox = optionGroup.querySelector(".color-option[data-value='White']");
            const blackBox = optionGroup.querySelector(".color-option[data-value='Black']");
            const colorSlider = optionGroup.querySelector(".color-box .slider"); // Specific to this color box

            // Event listener for White
            if (whiteBox) {
                whiteBox.addEventListener("click", () => {
                    if (colorSlider) { // Ensure slider exists
                        colorSlider.style.display = "block";
                        colorSlider.classList.remove("right");
                    }
                    whiteBox.classList.add("active");
                    if (blackBox) blackBox.classList.remove("active"); // Remove active from black
                    updateVariantInfo();
                });
            }

            // Event listener for Black
            if (blackBox) {
                blackBox.addEventListener("click", () => {
                    if (colorSlider) { // Ensure slider exists
                        colorSlider.style.display = "block";
                        colorSlider.classList.add("right");
                    }
                    blackBox.classList.add("active");
                    if (whiteBox) whiteBox.classList.remove("active"); // Remove active from white
                    updateVariantInfo();
                });
            }

            // *** IMPORTANT: REMOVED INITIAL CLICK TO ENSURE NO DEFAULT SELECTION ***
            // This ensures both boxes start white with black text.

        } else { // Use pills for other options (if any other custom variant is added later)
          const valuesContainer = document.createElement('div');
          valuesContainer.classList.add('variant-option-values');

          option.values.forEach(value => {
            const pill = document.createElement('span');
            pill.classList.add('variant-option-value-pill');
            pill.textContent = value;
            pill.dataset.value = value;
            valuesContainer.appendChild(pill);

            // Add click listener to pills
            pill.addEventListener('click', () => {
              // Remove 'selected' from all other pills in this group
              valuesContainer.querySelectorAll('.variant-option-value-pill').forEach(p => p.classList.remove('selected'));
              // Add 'selected' to the clicked pill
              pill.classList.add('selected');
              updateVariantInfo(); // Update info based on new selection
            });
          });
          optionGroup.appendChild(valuesContainer);
          modalVariantOptions.appendChild(optionGroup);

            // For pill options, automatically select the first value for convenience
            const firstPill = valuesContainer.querySelector('.variant-option-value-pill');
            if (firstPill) {
                firstPill.classList.add('selected');
            }
        }
      });

      // Initial update after generating all selectors (excluding the removed default color click)
      // This will ensure "SELECT OPTIONS" is shown if no variants are pre-selected.
      updateVariantInfo();
    };


    // Function to open the modal
    const openModal = async (productHandle) => {
      try {
        const response = await fetch(`/products/${productHandle}.js`);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        currentProductData = await response.json(); // Store fetched data

        // Populate modal with product data - ensure .src is accessed
        modalProductImage.src = (currentProductData.featured_image && currentProductData.featured_image.src) ? currentProductData.featured_image.src : 'https://placehold.co/400x400/cccccc/ffffff?text=No+Image';
        modalProductImage.alt = currentProductData.title;

        // Set width and height attributes if available in product data
        if (currentProductData.featured_image && currentProductData.featured_image.width && currentProductData.featured_image.height) {
            modalProductImage.setAttribute('width', currentProductData.featured_image.width);
            modalProductImage.setAttribute('height', currentProductData.featured_image.height);
        } else {
            modalProductImage.removeAttribute('width');
            modalProductImage.removeAttribute('height');
        }


        // Set text content for absolutely positioned elements
        modalProductTitle.textContent = currentProductData.title;
        modalProductPrice.textContent = formatMoney(currentProductData.price);
        modalProductDescription.innerHTML = currentProductData.description;

        generateVariantSelectors(currentProductData); // Generate and set initial state of variants

        quickViewModal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
      } catch (error) {
        console.error('Error fetching product data:', error);
        console.log('Could not load product details. Please check the product handle and network connection.');
        quickViewModal.style.display = 'none';
      }
    };

    // Function to close the modal
    const closeModal = () => {
      quickViewModal.style.display = 'none';
      document.body.style.overflow = '';
      modalProductImage.src = '';
      modalProductImage.removeAttribute('width'); // Clear width attribute
      modalProductImage.removeAttribute('height'); // Clear height attribute
      modalProductTitle.textContent = '';
      modalProductPrice.textContent = '';
      modalProductDescription.innerHTML = '';
      modalVariantOptions.innerHTML = ''; // Clear variant options on close
      modalQuantitySelector.value = 1;
      modalAddToCartButton.dataset.variantId = '';
      modalAddToCartButton.disabled = false;
      modalAddToCartButton.textContent = 'ADD TO CART â†’'; // Reset button text
      currentProductData = null; // Clear product data

      // Remove the global click listener for the custom dropdown when modal closes
      // This is crucial to prevent multiple listeners accumulating
      modalVariantOptions.querySelectorAll('.custom-dropdown-container').forEach(container => {
        if (container._globalClickListener) {
          document.removeEventListener("click", container._globalClickListener);
          delete container._globalClickListener; // Clean up reference
        }
      });
    };

    // Event listeners for opening modal (all overlays)
    document.querySelectorAll('.overlay-button').forEach(button => {
      button.addEventListener('click', (event) => {
        event.preventDefault();
        const productHandle = button.dataset.productHandle;
        if (productHandle) {
          openModal(productHandle);
        } else {
          console.warn('Overlay button clicked but no product handle found.');
        }
      });
    });

    // Event listeners for closing modal
    modalCloseButton.addEventListener('click', closeModal);
    modalOverlay.addEventListener('click', closeModal);

    // Add to Cart functionality
    modalAddToCartButton.addEventListener('click', async () => {
      const variantId = modalAddToCartButton.dataset.variantId;
      const quantity = parseInt(modalQuantitySelector.value, 10);

      if (!variantId || isNaN(quantity) || quantity <= 0) {
        console.error('Invalid variant ID or quantity.');
        // Using alert for simplicity, consider a custom modal UI for better UX
        alert('Please select all required options and ensure quantity is valid.');
        return;
      }

      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            items: [
              {
                id: variantId,
                quantity: quantity
              }
            ]
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(`Add to cart failed: ${errorData.message || 'Unknown error'}`);
        }

        const cartData = await response.json();
        console.log('Product added to cart:', cartData);
        // Optionally, close the modal and provide user feedback (e.g., small success message, update cart icon)
        closeModal();
        alert('Product added to cart successfully!'); // Using alert for simplicity, consider custom UI

      } catch (error) {
        console.error('Error adding to cart:', error);
        alert('Failed to add product to cart. Please try again.'); // Using alert for simplicity, consider custom UI
      }
    });

  });
</script>

{% schema %}
{
  "name": "Image Grid",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "TISSO VISON IN THE WILD"
    },
    {
      "type": "image_picker",
      "id": "image_1",
      "label": "Image 1 (Top Left)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_1",
      "label": "Overlay Image 1 (Optional)"
    },
    {
      "type": "product",
      "id": "product_1",
      "label": "Link Product 1"
    },
    {
      "type": "image_picker",
      "id": "image_2",
      "label": "Image 2 (Top Middle)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_2",
      "label": "Overlay Image 2 (Optional)"
    },
    {
      "type": "product",
      "id": "product_2",
      "label": "Link Product 2"
    },
    {
      "type": "image_picker",
      "id": "image_3",
      "label": "Image 3 (Top Right)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_3",
      "label": "Overlay Image 3 (Optional)"
    },
    {
      "type": "product",
      "id": "product_3",
      "label": "Link Product 3"
    },
    {
      "type": "image_picker",
      "id": "image_4",
      "label": "Image 4 (Bottom Left)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_4",
      "label": "Overlay Image 4 (Optional)"
    },
    {
      "type": "product",
      "id": "product_4",
      "label": "Link Product 4"
    },
    {
      "type": "image_picker",
      "id": "image_5",
      "label": "Image 5 (Bottom Middle)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_5",
      "label": "Overlay Image 5 (Optional)"
    },
    {
      "type": "product",
      "id": "product_5",
      "label": "Link Product 5"
    },
    {
      "type": "image_picker",
      "id": "image_6",
      "label": "Image 6 (Bottom Right)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image_6",
      "label": "Overlay Image 6 (Optional)"
    },
    {
      "type": "product",
      "id": "product_6",
      "label": "Link Product 6"
    }
  ],
  "presets": [
    {
      "name": "Image Grid Section",
      "category": "Image",
      "settings": {
        "title": "TISSO VISON IN THE WILD"
      }
    }
  ]
}
{% endschema %}
